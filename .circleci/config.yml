version: 2.1

workflows:

  commit:
    jobs:
      - build-release-ninja:
          filters:
            branches:
              only:
                - master
                - /issue_.*/

  nightly:
    triggers:
      - schedule:
          # https://crontab.guru/#0_4_5,15_*_*
          # At 04:00 on day-of-month 5 and 15.
          cron: "0 4 5,15 * *"
          filters:
            branches:
              only:
                - master
                - /issue_.*/
    jobs:
      - build-release
      - build-release-ninja-mydocker
      - build-debug:
          requires:
            - build-release
      - build-debug-ninja:
          requires:
            - build-release
      - build-ARM:
          requires:
            - build-release


executors:

  ubuntu-mydocker:
    docker:
      - image: micwide/ubuntu-retractordb:latest
    resource_class: large

  ubuntu-docker-2204:
    docker:
      - image: cimg/base:edge
    resource_class: large

  ubuntu-docker:
    docker:
      - image: cimg/base:2025.09
    resource_class: large

  ubuntu-machine:
    machine:
      image: ubuntu-2404:2024.11.1
    resource_class: large 

  ubuntu-machine-arm:
    machine:
      image: ubuntu-2404:2024.11.1
    resource_class: arm.large

commands:
  prep-env:
    parameters:
      gcc_version:
        type: string
        default: "gcc"
      conan_profile1:
        type: string
        default: ""
      conan_profile2:
        type: string
        default: ""
      build_package:
        type: string
        default: "make"
    steps:
      - run:
          name: Install toolchain - conan 2.0
          command: |
            uname -a && cat /proc/version && cat /etc/issue
            sudo apt-get update
            sudo apt-get -y install <<parameters.gcc_version>> cmake <<parameters.build_package>> build-essential python3 python3-pip python3-venv valgrind cppcheck mold 
            python3 -m venv .venv
            source .venv/bin/activate
            pip3 install --upgrade pip 
            pip3 install conan
            if [ ! -f ~/.conan2/profiles/default ] ; then conan profile detect && echo '<<parameters.conan_profile1>>' >> ~/.conan2/profiles/default && echo '<<parameters.conan_profile2>>' >> ~/.conan2/profiles/default ; fi
            conan profile show
  conan-build:
    parameters:
      build_type: 
        type: string
        default: "Release"
      build_param:
        type: string
        default: ""
      build_tool:
        type: string
        default: "make"
    steps:
      - run:
          name: Conan install and build; <<parameters.build_tool>> install
          command: |
            source .venv/bin/activate
            conan source .
            conan install . -s build_type=<<parameters.build_type>> <<parameters.build_param>>
            conan build . -s build_type=<<parameters.build_type>> <<parameters.build_param>>
            cd build/<<parameters.build_type>> && <<parameters.build_tool>> install
  run-test:
    parameters:
      build_type:
        type: string
        default: "Release"
      build_tool:
        type: string
        default: "make"
    steps:
      - run:
          name: Smoke test
          command: |
            export PATH="$HOME/.local/bin:$PATH"
            cd build/<<parameters.build_type>> && <<parameters.build_tool>> showelf
            xretractor -h && xqry -h
      - run:
          name: Regression & Unit test
          command: |
            export PATH="$HOME/.local/bin:$PATH"
            cd build/<<parameters.build_type>>/test && ctest -V
  run-cppcheck:
    parameters:
      build_type:
        type: string
        default: "Release"
      build_tool:
        type: string
        default: "make"
    steps:
      - run:
          name: Static analysis
          command: |
            cd build/<<parameters.build_type>> && <<parameters.build_tool>> cppcheck
  run-package:
    parameters:
      build_type:
        type: string
        default: "Release"
      build_tool:
        type: string
        default: "make"
    steps:
      - run:
          name: Package
          command: |
            cd build/<<parameters.build_type>> && <<parameters.build_tool>> packages

jobs:
  build-release-ninja-mydocker:
    working_directory: ~/retractordb
    executor: ubuntu-mydocker
    steps:
      - checkout
      - prep-env:
          build_package: "ninja-build"
          conan_profile1: "[conf]"
          conan_profile2: "tools.cmake.cmaketoolchain:generator=Ninja"
      - conan-build:
          build_param: --build missing
          build_tool: ninja
      - run-test:
          build_tool: ninja
      - run-package:
          build_tool: ninja

  build-release-ninja-2204:
    working_directory: ~/retractordb
    executor: ubuntu-docker
    steps:
      - checkout
      - prep-env:
          build_package: "ninja-build"
          conan_profile1: "[conf]"
          conan_profile2: "tools.cmake.cmaketoolchain:generator=Ninja"
      - conan-build:
          build_param: --build missing
          build_tool: ninja
      - run-test:
          build_tool: ninja
      - run-package:
          build_tool: ninja

  build-release:
    working_directory: ~/retractordb
    executor: ubuntu-docker
    steps:
      - checkout
      - prep-env:
          build_package: make
          conan_profile1: ""
          conan_profile2: ""
      - conan-build:
          build_param: --build missing
      - run-test
      - run-package

  build-release-ninja:
    working_directory: ~/retractordb
    executor: ubuntu-docker
    steps:
      - checkout
      - prep-env:
          build_package: "ninja-build"
          conan_profile1: "[conf]"
          conan_profile2: "tools.cmake.cmaketoolchain:generator=Ninja"
      - conan-build:
          build_param: --build missing
          build_tool: ninja
      - run-test:
          build_tool: ninja
      - run-package:
          build_tool: ninja
  

  build-debug:
    working_directory: ~/retractordb
    executor: ubuntu-docker
    steps:
      - checkout
      - prep-env:
          build_package: make
          conan_profile1: ""
          conan_profile2: ""
      - conan-build:
          build_type: Debug
          build_param: --build missing
      - run-test:
          build_type: Debug
      - run-package:
          build_type: Debug 
          

  build-debug-ninja:
    working_directory: ~/retractordb
    executor: ubuntu-docker
    steps:
      - checkout
      - prep-env:
          build_package: ninja-build
          conan_profile1: "[conf]"
          conan_profile2: "tools.cmake.cmaketoolchain:generator=Ninja"
      - conan-build:
          build_type: Debug
          build_param: --build missing
          build_tool: ninja
      - run-test:
          build_type: Debug
          build_tool: ninja
      - run-package:
          build_type: Debug
          build_tool: ninja

  build-ARM:
    parameters:
      build_type:
        type: string
        default: "Debug"
      build_tool:
        type: string
        default: "make"
    working_directory: ~/retractordb
    executor: ubuntu-machine-arm
    steps:
      - checkout
      - prep-env:
          build_package: make
          conan_profile1: ""
          conan_profile2: ""
      - conan-build:
          build_type: <<parameters.build_type>>
          build_param: --build missing
      - run:
          name: Smoke test
          command: |
            export PATH="$HOME/.local/bin:$PATH"
            cd build/<<parameters.build_type>> && <<parameters.build_tool>> showelf
            xretractor -h && xqry -h
      - run:
          name: Regression & Unit test
          command: |
            export PATH="$HOME/.local/bin:$PATH"
            cd build/<<parameters.build_type>>/test && ctest -V
