Input file:query.rql
Compile result:OK
:STORAGE(0/1)	temp/
signalRow(1/50)
	:- PUSH_STREAM(source)
	:- STREAM_AGSE(1,25)
	source_0: INTEGER
		PUSH_ID(source[0])
	source_1: INTEGER
		PUSH_ID(source[1])
	source_2: INTEGER
		PUSH_ID(source[2])
	source_3: INTEGER
		PUSH_ID(source[3])
	source_4: INTEGER
		PUSH_ID(source[4])
	source_5: INTEGER
		PUSH_ID(source[5])
	source_6: INTEGER
		PUSH_ID(source[6])
	source_7: INTEGER
		PUSH_ID(source[7])
	source_8: INTEGER
		PUSH_ID(source[8])
	source_9: INTEGER
		PUSH_ID(source[9])
	source_10: INTEGER
		PUSH_ID(source[10])
	source_11: INTEGER
		PUSH_ID(source[11])
	source_12: INTEGER
		PUSH_ID(source[12])
	source_13: INTEGER
		PUSH_ID(source[13])
	source_14: INTEGER
		PUSH_ID(source[14])
	source_15: INTEGER
		PUSH_ID(source[15])
	source_16: INTEGER
		PUSH_ID(source[16])
	source_17: INTEGER
		PUSH_ID(source[17])
	source_18: INTEGER
		PUSH_ID(source[18])
	source_19: INTEGER
		PUSH_ID(source[19])
	source_20: INTEGER
		PUSH_ID(source[20])
	source_21: INTEGER
		PUSH_ID(source[21])
	source_22: INTEGER
		PUSH_ID(source[22])
	source_23: INTEGER
		PUSH_ID(source[23])
	source_24: INTEGER
		PUSH_ID(source[24])
accRow(1/50)
	:- PUSH_STREAM(signalRow)
	:- PUSH_STREAM(filter)
	:- STREAM_ADD
	accRow_0: INTEGER
		PUSH_ID(signalRow[0])
		PUSH_ID(filter[0])
		MULTIPLY
	accRow_1: INTEGER
		PUSH_ID(signalRow[1])
		PUSH_ID(filter[1])
		MULTIPLY
	accRow_2: INTEGER
		PUSH_ID(signalRow[2])
		PUSH_ID(filter[2])
		MULTIPLY
	accRow_3: INTEGER
		PUSH_ID(signalRow[3])
		PUSH_ID(filter[3])
		MULTIPLY
	accRow_4: INTEGER
		PUSH_ID(signalRow[4])
		PUSH_ID(filter[4])
		MULTIPLY
	accRow_5: INTEGER
		PUSH_ID(signalRow[5])
		PUSH_ID(filter[5])
		MULTIPLY
	accRow_6: INTEGER
		PUSH_ID(signalRow[6])
		PUSH_ID(filter[6])
		MULTIPLY
	accRow_7: INTEGER
		PUSH_ID(signalRow[7])
		PUSH_ID(filter[7])
		MULTIPLY
	accRow_8: INTEGER
		PUSH_ID(signalRow[8])
		PUSH_ID(filter[8])
		MULTIPLY
	accRow_9: INTEGER
		PUSH_ID(signalRow[9])
		PUSH_ID(filter[9])
		MULTIPLY
	accRow_10: INTEGER
		PUSH_ID(signalRow[10])
		PUSH_ID(filter[10])
		MULTIPLY
	accRow_11: INTEGER
		PUSH_ID(signalRow[11])
		PUSH_ID(filter[11])
		MULTIPLY
	accRow_12: INTEGER
		PUSH_ID(signalRow[12])
		PUSH_ID(filter[12])
		MULTIPLY
	accRow_13: INTEGER
		PUSH_ID(signalRow[13])
		PUSH_ID(filter[13])
		MULTIPLY
	accRow_14: INTEGER
		PUSH_ID(signalRow[14])
		PUSH_ID(filter[14])
		MULTIPLY
	accRow_15: INTEGER
		PUSH_ID(signalRow[15])
		PUSH_ID(filter[15])
		MULTIPLY
	accRow_16: INTEGER
		PUSH_ID(signalRow[16])
		PUSH_ID(filter[16])
		MULTIPLY
	accRow_17: INTEGER
		PUSH_ID(signalRow[17])
		PUSH_ID(filter[17])
		MULTIPLY
	accRow_18: INTEGER
		PUSH_ID(signalRow[18])
		PUSH_ID(filter[18])
		MULTIPLY
	accRow_19: INTEGER
		PUSH_ID(signalRow[19])
		PUSH_ID(filter[19])
		MULTIPLY
	accRow_20: INTEGER
		PUSH_ID(signalRow[20])
		PUSH_ID(filter[20])
		MULTIPLY
	accRow_21: INTEGER
		PUSH_ID(signalRow[21])
		PUSH_ID(filter[21])
		MULTIPLY
	accRow_22: INTEGER
		PUSH_ID(signalRow[22])
		PUSH_ID(filter[22])
		MULTIPLY
	accRow_23: INTEGER
		PUSH_ID(signalRow[23])
		PUSH_ID(filter[23])
		MULTIPLY
	accRow_24: INTEGER
		PUSH_ID(signalRow[24])
		PUSH_ID(filter[24])
		MULTIPLY
output(1/50)
	:- PUSH_STREAM(accRow)
	:- STREAM_SUM
	output_0: INTEGER
		PUSH_ID(accRow[0])
outputAll(1/50)
	:- PUSH_STREAM(output)
	:- PUSH_STREAM(source)
	:- STREAM_ADD
	outputAll_0: INTEGER
		PUSH_ID(output[0])
		PUSH_VAL(25)
		DIVIDE
	outputAll_1: INTEGER
		PUSH_ID(source[0])
source(1/50)	/dev/urandom
	data: BYTE
filter(1/1)	filterremez.txt
	coef: INTEGER
