
// Generated from RQL.g4 by ANTLR 4.13.1


#include "RQLLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct RQLLexerStaticData final {
  RQLLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  RQLLexerStaticData(const RQLLexerStaticData&) = delete;
  RQLLexerStaticData(RQLLexerStaticData&&) = delete;
  RQLLexerStaticData& operator=(const RQLLexerStaticData&) = delete;
  RQLLexerStaticData& operator=(RQLLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag rqllexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
RQLLexerStaticData *rqllexerLexerStaticData = nullptr;

void rqllexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (rqllexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(rqllexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<RQLLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "BYTE_T", "STRING_T", "UNSIGNED_T", "INTEGER_T", 
      "FLOAT_T", "DOUBLE_T", "SELECT", "STREAM", "FROM", "DECLARE", "FILE", 
      "STORAGE", "MIN", "MAX", "AVG", "SUMC", "ID", "STRING", "FLOAT", "DECIMAL", 
      "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", "DOUBLE_BAR", "DOT", 
      "UNDERLINE", "AT", "SHARP", "AND", "MOD", "DOLLAR", "COMMA", "SEMI", 
      "COLON", "DOUBLE_COLON", "STAR", "DIVIDE", "PLUS", "MINUS", "BIT_NOT", 
      "BIT_OR", "BIT_XOR", "SPACE", "COMMENT", "LINE_COMMENT1", "LINE_COMMENT2", 
      "LETTER", "DEC_DOT_DEC", "HEX_DIGIT", "DEC_DIGIT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'['", "']'", "'('", "')'", "'Sqrt'", "'Ceil'", "'Abs'", "'Floor'", 
      "'Sign'", "'Chr'", "'Length'", "'ToNumber'", "'ToTimeStamp'", "'FloatCast'", 
      "'IntCast'", "'Count'", "'Crc'", "'Sum'", "'IsZero'", "'IsNonZero'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "'='", "'>'", "'<'", "'!'", "'||'", "'.'", "'_'", 
      "'@'", "'#'", "'&'", "'%'", "'$'", "','", "';'", "':'", "'::'", "'*'", 
      "'/'", "'+'", "'-'", "'~'", "'|'", "'^'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "BYTE_T", "STRING_T", "UNSIGNED_T", "INTEGER_T", "FLOAT_T", 
      "DOUBLE_T", "SELECT", "STREAM", "FROM", "DECLARE", "FILE", "STORAGE", 
      "MIN", "MAX", "AVG", "SUMC", "ID", "STRING", "FLOAT", "DECIMAL", "REAL", 
      "EQUAL", "GREATER", "LESS", "EXCLAMATION", "DOUBLE_BAR", "DOT", "UNDERLINE", 
      "AT", "SHARP", "AND", "MOD", "DOLLAR", "COMMA", "SEMI", "COLON", "DOUBLE_COLON", 
      "STAR", "DIVIDE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_XOR", 
      "SPACE", "COMMENT", "LINE_COMMENT1", "LINE_COMMENT2"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,68,619,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
  	5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
  	1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
  	1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
  	1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
  	1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
  	1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
  	1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
  	3,20,276,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,3,21,290,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,300,8,
  	22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,3,23,316,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,
  	24,328,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
  	25,3,25,342,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
  	26,1,26,3,26,356,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
  	27,1,27,1,27,3,27,370,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,
  	28,380,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
  	29,1,29,1,29,3,29,396,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,
  	30,406,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
  	31,1,31,1,31,3,31,422,8,31,1,32,1,32,1,32,1,32,1,32,1,32,3,32,430,8,32,
  	1,33,1,33,1,33,1,33,1,33,1,33,3,33,438,8,33,1,34,1,34,1,34,1,34,1,34,
  	1,34,3,34,446,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,456,8,
  	35,1,36,1,36,5,36,460,8,36,10,36,12,36,463,9,36,1,37,1,37,1,37,1,37,5,
  	37,469,8,37,10,37,12,37,472,9,37,1,37,1,37,1,38,1,38,1,39,4,39,479,8,
  	39,11,39,12,39,480,1,40,1,40,3,40,485,8,40,1,40,1,40,3,40,489,8,40,1,
  	40,4,40,492,8,40,11,40,12,40,493,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,
  	44,1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,
  	51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,57,1,
  	57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,4,
  	64,545,8,64,11,64,12,64,546,1,64,1,64,1,65,1,65,1,65,1,65,1,65,5,65,556,
  	8,65,10,65,12,65,559,9,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,
  	5,66,570,8,66,10,66,12,66,573,9,66,1,66,1,66,1,67,1,67,1,67,1,67,5,67,
  	581,8,67,10,67,12,67,584,9,67,1,67,1,67,1,68,1,68,1,69,4,69,591,8,69,
  	11,69,12,69,592,1,69,1,69,4,69,597,8,69,11,69,12,69,598,1,69,4,69,602,
  	8,69,11,69,12,69,603,1,69,1,69,1,69,1,69,4,69,610,8,69,11,69,12,69,611,
  	3,69,614,8,69,1,70,1,70,1,71,1,71,1,557,0,72,1,1,3,2,5,3,7,4,9,5,11,6,
  	13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
  	37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
  	30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
  	83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,
  	53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,
  	63,127,64,129,65,131,66,133,67,135,68,137,0,139,0,141,0,143,0,1,0,9,2,
  	0,65,90,97,122,5,0,36,36,48,57,65,90,95,95,97,122,1,0,39,39,2,0,43,43,
  	45,45,3,0,9,10,13,13,32,32,2,0,10,10,13,13,2,0,65,90,95,95,2,0,48,57,
  	65,70,1,0,48,57,650,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
  	9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
  	0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
  	0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,
  	41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
  	0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
  	0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
  	73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,
  	0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
  	0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,
  	0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,
  	0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,
  	0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,
  	0,135,1,0,0,0,1,145,1,0,0,0,3,147,1,0,0,0,5,149,1,0,0,0,7,151,1,0,0,0,
  	9,153,1,0,0,0,11,158,1,0,0,0,13,163,1,0,0,0,15,167,1,0,0,0,17,173,1,0,
  	0,0,19,178,1,0,0,0,21,182,1,0,0,0,23,189,1,0,0,0,25,198,1,0,0,0,27,210,
  	1,0,0,0,29,220,1,0,0,0,31,228,1,0,0,0,33,234,1,0,0,0,35,238,1,0,0,0,37,
  	242,1,0,0,0,39,249,1,0,0,0,41,275,1,0,0,0,43,289,1,0,0,0,45,299,1,0,0,
  	0,47,315,1,0,0,0,49,327,1,0,0,0,51,341,1,0,0,0,53,355,1,0,0,0,55,369,
  	1,0,0,0,57,379,1,0,0,0,59,395,1,0,0,0,61,405,1,0,0,0,63,421,1,0,0,0,65,
  	429,1,0,0,0,67,437,1,0,0,0,69,445,1,0,0,0,71,455,1,0,0,0,73,457,1,0,0,
  	0,75,464,1,0,0,0,77,475,1,0,0,0,79,478,1,0,0,0,81,484,1,0,0,0,83,495,
  	1,0,0,0,85,497,1,0,0,0,87,499,1,0,0,0,89,501,1,0,0,0,91,503,1,0,0,0,93,
  	506,1,0,0,0,95,508,1,0,0,0,97,510,1,0,0,0,99,512,1,0,0,0,101,514,1,0,
  	0,0,103,516,1,0,0,0,105,518,1,0,0,0,107,520,1,0,0,0,109,522,1,0,0,0,111,
  	524,1,0,0,0,113,526,1,0,0,0,115,529,1,0,0,0,117,531,1,0,0,0,119,533,1,
  	0,0,0,121,535,1,0,0,0,123,537,1,0,0,0,125,539,1,0,0,0,127,541,1,0,0,0,
  	129,544,1,0,0,0,131,550,1,0,0,0,133,565,1,0,0,0,135,576,1,0,0,0,137,587,
  	1,0,0,0,139,613,1,0,0,0,141,615,1,0,0,0,143,617,1,0,0,0,145,146,5,91,
  	0,0,146,2,1,0,0,0,147,148,5,93,0,0,148,4,1,0,0,0,149,150,5,40,0,0,150,
  	6,1,0,0,0,151,152,5,41,0,0,152,8,1,0,0,0,153,154,5,83,0,0,154,155,5,113,
  	0,0,155,156,5,114,0,0,156,157,5,116,0,0,157,10,1,0,0,0,158,159,5,67,0,
  	0,159,160,5,101,0,0,160,161,5,105,0,0,161,162,5,108,0,0,162,12,1,0,0,
  	0,163,164,5,65,0,0,164,165,5,98,0,0,165,166,5,115,0,0,166,14,1,0,0,0,
  	167,168,5,70,0,0,168,169,5,108,0,0,169,170,5,111,0,0,170,171,5,111,0,
  	0,171,172,5,114,0,0,172,16,1,0,0,0,173,174,5,83,0,0,174,175,5,105,0,0,
  	175,176,5,103,0,0,176,177,5,110,0,0,177,18,1,0,0,0,178,179,5,67,0,0,179,
  	180,5,104,0,0,180,181,5,114,0,0,181,20,1,0,0,0,182,183,5,76,0,0,183,184,
  	5,101,0,0,184,185,5,110,0,0,185,186,5,103,0,0,186,187,5,116,0,0,187,188,
  	5,104,0,0,188,22,1,0,0,0,189,190,5,84,0,0,190,191,5,111,0,0,191,192,5,
  	78,0,0,192,193,5,117,0,0,193,194,5,109,0,0,194,195,5,98,0,0,195,196,5,
  	101,0,0,196,197,5,114,0,0,197,24,1,0,0,0,198,199,5,84,0,0,199,200,5,111,
  	0,0,200,201,5,84,0,0,201,202,5,105,0,0,202,203,5,109,0,0,203,204,5,101,
  	0,0,204,205,5,83,0,0,205,206,5,116,0,0,206,207,5,97,0,0,207,208,5,109,
  	0,0,208,209,5,112,0,0,209,26,1,0,0,0,210,211,5,70,0,0,211,212,5,108,0,
  	0,212,213,5,111,0,0,213,214,5,97,0,0,214,215,5,116,0,0,215,216,5,67,0,
  	0,216,217,5,97,0,0,217,218,5,115,0,0,218,219,5,116,0,0,219,28,1,0,0,0,
  	220,221,5,73,0,0,221,222,5,110,0,0,222,223,5,116,0,0,223,224,5,67,0,0,
  	224,225,5,97,0,0,225,226,5,115,0,0,226,227,5,116,0,0,227,30,1,0,0,0,228,
  	229,5,67,0,0,229,230,5,111,0,0,230,231,5,117,0,0,231,232,5,110,0,0,232,
  	233,5,116,0,0,233,32,1,0,0,0,234,235,5,67,0,0,235,236,5,114,0,0,236,237,
  	5,99,0,0,237,34,1,0,0,0,238,239,5,83,0,0,239,240,5,117,0,0,240,241,5,
  	109,0,0,241,36,1,0,0,0,242,243,5,73,0,0,243,244,5,115,0,0,244,245,5,90,
  	0,0,245,246,5,101,0,0,246,247,5,114,0,0,247,248,5,111,0,0,248,38,1,0,
  	0,0,249,250,5,73,0,0,250,251,5,115,0,0,251,252,5,78,0,0,252,253,5,111,
  	0,0,253,254,5,110,0,0,254,255,5,90,0,0,255,256,5,101,0,0,256,257,5,114,
  	0,0,257,258,5,111,0,0,258,40,1,0,0,0,259,260,5,66,0,0,260,261,5,89,0,
  	0,261,262,5,84,0,0,262,276,5,69,0,0,263,264,5,66,0,0,264,265,5,121,0,
  	0,265,266,5,116,0,0,266,276,5,101,0,0,267,268,5,67,0,0,268,269,5,72,0,
  	0,269,270,5,65,0,0,270,276,5,82,0,0,271,272,5,67,0,0,272,273,5,104,0,
  	0,273,274,5,97,0,0,274,276,5,114,0,0,275,259,1,0,0,0,275,263,1,0,0,0,
  	275,267,1,0,0,0,275,271,1,0,0,0,276,42,1,0,0,0,277,278,5,83,0,0,278,279,
  	5,84,0,0,279,280,5,82,0,0,280,281,5,73,0,0,281,282,5,78,0,0,282,290,5,
  	71,0,0,283,284,5,83,0,0,284,285,5,116,0,0,285,286,5,114,0,0,286,287,5,
  	105,0,0,287,288,5,110,0,0,288,290,5,103,0,0,289,277,1,0,0,0,289,283,1,
  	0,0,0,290,44,1,0,0,0,291,292,5,85,0,0,292,293,5,73,0,0,293,294,5,78,0,
  	0,294,300,5,84,0,0,295,296,5,85,0,0,296,297,5,105,0,0,297,298,5,110,0,
  	0,298,300,5,116,0,0,299,291,1,0,0,0,299,295,1,0,0,0,300,46,1,0,0,0,301,
  	302,5,73,0,0,302,303,5,78,0,0,303,304,5,84,0,0,304,305,5,69,0,0,305,306,
  	5,71,0,0,306,307,5,69,0,0,307,316,5,82,0,0,308,309,5,73,0,0,309,310,5,
  	110,0,0,310,311,5,116,0,0,311,312,5,101,0,0,312,313,5,103,0,0,313,314,
  	5,101,0,0,314,316,5,114,0,0,315,301,1,0,0,0,315,308,1,0,0,0,316,48,1,
  	0,0,0,317,318,5,70,0,0,318,319,5,76,0,0,319,320,5,79,0,0,320,321,5,65,
  	0,0,321,328,5,84,0,0,322,323,5,70,0,0,323,324,5,108,0,0,324,325,5,111,
  	0,0,325,326,5,97,0,0,326,328,5,116,0,0,327,317,1,0,0,0,327,322,1,0,0,
  	0,328,50,1,0,0,0,329,330,5,68,0,0,330,331,5,79,0,0,331,332,5,85,0,0,332,
  	333,5,66,0,0,333,334,5,76,0,0,334,342,5,69,0,0,335,336,5,68,0,0,336,337,
  	5,111,0,0,337,338,5,117,0,0,338,339,5,98,0,0,339,340,5,108,0,0,340,342,
  	5,101,0,0,341,329,1,0,0,0,341,335,1,0,0,0,342,52,1,0,0,0,343,344,5,83,
  	0,0,344,345,5,69,0,0,345,346,5,76,0,0,346,347,5,69,0,0,347,348,5,67,0,
  	0,348,356,5,84,0,0,349,350,5,115,0,0,350,351,5,101,0,0,351,352,5,108,
  	0,0,352,353,5,101,0,0,353,354,5,99,0,0,354,356,5,116,0,0,355,343,1,0,
  	0,0,355,349,1,0,0,0,356,54,1,0,0,0,357,358,5,83,0,0,358,359,5,84,0,0,
  	359,360,5,82,0,0,360,361,5,69,0,0,361,362,5,65,0,0,362,370,5,77,0,0,363,
  	364,5,115,0,0,364,365,5,116,0,0,365,366,5,114,0,0,366,367,5,101,0,0,367,
  	368,5,97,0,0,368,370,5,109,0,0,369,357,1,0,0,0,369,363,1,0,0,0,370,56,
  	1,0,0,0,371,372,5,70,0,0,372,373,5,82,0,0,373,374,5,79,0,0,374,380,5,
  	77,0,0,375,376,5,102,0,0,376,377,5,114,0,0,377,378,5,111,0,0,378,380,
  	5,109,0,0,379,371,1,0,0,0,379,375,1,0,0,0,380,58,1,0,0,0,381,382,5,68,
  	0,0,382,383,5,69,0,0,383,384,5,67,0,0,384,385,5,76,0,0,385,386,5,65,0,
  	0,386,387,5,82,0,0,387,396,5,69,0,0,388,389,5,100,0,0,389,390,5,101,0,
  	0,390,391,5,99,0,0,391,392,5,108,0,0,392,393,5,97,0,0,393,394,5,114,0,
  	0,394,396,5,101,0,0,395,381,1,0,0,0,395,388,1,0,0,0,396,60,1,0,0,0,397,
  	398,5,70,0,0,398,399,5,73,0,0,399,400,5,76,0,0,400,406,5,69,0,0,401,402,
  	5,102,0,0,402,403,5,105,0,0,403,404,5,108,0,0,404,406,5,101,0,0,405,397,
  	1,0,0,0,405,401,1,0,0,0,406,62,1,0,0,0,407,408,5,83,0,0,408,409,5,84,
  	0,0,409,410,5,79,0,0,410,411,5,82,0,0,411,412,5,65,0,0,412,413,5,71,0,
  	0,413,422,5,69,0,0,414,415,5,115,0,0,415,416,5,116,0,0,416,417,5,111,
  	0,0,417,418,5,114,0,0,418,419,5,97,0,0,419,420,5,103,0,0,420,422,5,101,
  	0,0,421,407,1,0,0,0,421,414,1,0,0,0,422,64,1,0,0,0,423,424,5,77,0,0,424,
  	425,5,73,0,0,425,430,5,78,0,0,426,427,5,109,0,0,427,428,5,105,0,0,428,
  	430,5,110,0,0,429,423,1,0,0,0,429,426,1,0,0,0,430,66,1,0,0,0,431,432,
  	5,77,0,0,432,433,5,65,0,0,433,438,5,88,0,0,434,435,5,109,0,0,435,436,
  	5,97,0,0,436,438,5,120,0,0,437,431,1,0,0,0,437,434,1,0,0,0,438,68,1,0,
  	0,0,439,440,5,65,0,0,440,441,5,86,0,0,441,446,5,71,0,0,442,443,5,97,0,
  	0,443,444,5,118,0,0,444,446,5,103,0,0,445,439,1,0,0,0,445,442,1,0,0,0,
  	446,70,1,0,0,0,447,448,5,83,0,0,448,449,5,85,0,0,449,450,5,77,0,0,450,
  	456,5,67,0,0,451,452,5,115,0,0,452,453,5,117,0,0,453,454,5,109,0,0,454,
  	456,5,99,0,0,455,447,1,0,0,0,455,451,1,0,0,0,456,72,1,0,0,0,457,461,7,
  	0,0,0,458,460,7,1,0,0,459,458,1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,
  	461,462,1,0,0,0,462,74,1,0,0,0,463,461,1,0,0,0,464,470,5,39,0,0,465,469,
  	8,2,0,0,466,467,5,39,0,0,467,469,5,39,0,0,468,465,1,0,0,0,468,466,1,0,
  	0,0,469,472,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,473,1,0,0,0,472,
  	470,1,0,0,0,473,474,5,39,0,0,474,76,1,0,0,0,475,476,3,139,69,0,476,78,
  	1,0,0,0,477,479,3,143,71,0,478,477,1,0,0,0,479,480,1,0,0,0,480,478,1,
  	0,0,0,480,481,1,0,0,0,481,80,1,0,0,0,482,485,3,79,39,0,483,485,3,139,
  	69,0,484,482,1,0,0,0,484,483,1,0,0,0,485,486,1,0,0,0,486,488,5,69,0,0,
  	487,489,7,3,0,0,488,487,1,0,0,0,488,489,1,0,0,0,489,491,1,0,0,0,490,492,
  	3,143,71,0,491,490,1,0,0,0,492,493,1,0,0,0,493,491,1,0,0,0,493,494,1,
  	0,0,0,494,82,1,0,0,0,495,496,5,61,0,0,496,84,1,0,0,0,497,498,5,62,0,0,
  	498,86,1,0,0,0,499,500,5,60,0,0,500,88,1,0,0,0,501,502,5,33,0,0,502,90,
  	1,0,0,0,503,504,5,124,0,0,504,505,5,124,0,0,505,92,1,0,0,0,506,507,5,
  	46,0,0,507,94,1,0,0,0,508,509,5,95,0,0,509,96,1,0,0,0,510,511,5,64,0,
  	0,511,98,1,0,0,0,512,513,5,35,0,0,513,100,1,0,0,0,514,515,5,38,0,0,515,
  	102,1,0,0,0,516,517,5,37,0,0,517,104,1,0,0,0,518,519,5,36,0,0,519,106,
  	1,0,0,0,520,521,5,44,0,0,521,108,1,0,0,0,522,523,5,59,0,0,523,110,1,0,
  	0,0,524,525,5,58,0,0,525,112,1,0,0,0,526,527,5,58,0,0,527,528,5,58,0,
  	0,528,114,1,0,0,0,529,530,5,42,0,0,530,116,1,0,0,0,531,532,5,47,0,0,532,
  	118,1,0,0,0,533,534,5,43,0,0,534,120,1,0,0,0,535,536,5,45,0,0,536,122,
  	1,0,0,0,537,538,5,126,0,0,538,124,1,0,0,0,539,540,5,124,0,0,540,126,1,
  	0,0,0,541,542,5,94,0,0,542,128,1,0,0,0,543,545,7,4,0,0,544,543,1,0,0,
  	0,545,546,1,0,0,0,546,544,1,0,0,0,546,547,1,0,0,0,547,548,1,0,0,0,548,
  	549,6,64,0,0,549,130,1,0,0,0,550,551,5,47,0,0,551,552,5,42,0,0,552,557,
  	1,0,0,0,553,556,3,131,65,0,554,556,9,0,0,0,555,553,1,0,0,0,555,554,1,
  	0,0,0,556,559,1,0,0,0,557,558,1,0,0,0,557,555,1,0,0,0,558,560,1,0,0,0,
  	559,557,1,0,0,0,560,561,5,42,0,0,561,562,5,47,0,0,562,563,1,0,0,0,563,
  	564,6,65,1,0,564,132,1,0,0,0,565,566,5,35,0,0,566,567,5,32,0,0,567,571,
  	1,0,0,0,568,570,8,5,0,0,569,568,1,0,0,0,570,573,1,0,0,0,571,569,1,0,0,
  	0,571,572,1,0,0,0,572,574,1,0,0,0,573,571,1,0,0,0,574,575,6,66,1,0,575,
  	134,1,0,0,0,576,577,5,47,0,0,577,578,5,47,0,0,578,582,1,0,0,0,579,581,
  	8,5,0,0,580,579,1,0,0,0,581,584,1,0,0,0,582,580,1,0,0,0,582,583,1,0,0,
  	0,583,585,1,0,0,0,584,582,1,0,0,0,585,586,6,67,1,0,586,136,1,0,0,0,587,
  	588,7,6,0,0,588,138,1,0,0,0,589,591,3,143,71,0,590,589,1,0,0,0,591,592,
  	1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,594,1,0,0,0,594,596,5,46,
  	0,0,595,597,3,143,71,0,596,595,1,0,0,0,597,598,1,0,0,0,598,596,1,0,0,
  	0,598,599,1,0,0,0,599,614,1,0,0,0,600,602,3,143,71,0,601,600,1,0,0,0,
  	602,603,1,0,0,0,603,601,1,0,0,0,603,604,1,0,0,0,604,605,1,0,0,0,605,606,
  	5,46,0,0,606,614,1,0,0,0,607,609,5,46,0,0,608,610,3,143,71,0,609,608,
  	1,0,0,0,610,611,1,0,0,0,611,609,1,0,0,0,611,612,1,0,0,0,612,614,1,0,0,
  	0,613,590,1,0,0,0,613,601,1,0,0,0,613,607,1,0,0,0,614,140,1,0,0,0,615,
  	616,7,7,0,0,616,142,1,0,0,0,617,618,7,8,0,0,618,144,1,0,0,0,34,0,275,
  	289,299,315,327,341,355,369,379,395,405,421,429,437,445,455,461,468,470,
  	480,484,488,493,546,555,557,571,582,592,598,603,611,613,2,6,0,0,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  rqllexerLexerStaticData = staticData.release();
}

}

RQLLexer::RQLLexer(CharStream *input) : Lexer(input) {
  RQLLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *rqllexerLexerStaticData->atn, rqllexerLexerStaticData->decisionToDFA, rqllexerLexerStaticData->sharedContextCache);
}

RQLLexer::~RQLLexer() {
  delete _interpreter;
}

std::string RQLLexer::getGrammarFileName() const {
  return "RQL.g4";
}

const std::vector<std::string>& RQLLexer::getRuleNames() const {
  return rqllexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& RQLLexer::getChannelNames() const {
  return rqllexerLexerStaticData->channelNames;
}

const std::vector<std::string>& RQLLexer::getModeNames() const {
  return rqllexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& RQLLexer::getVocabulary() const {
  return rqllexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView RQLLexer::getSerializedATN() const {
  return rqllexerLexerStaticData->serializedATN;
}

const atn::ATN& RQLLexer::getATN() const {
  return *rqllexerLexerStaticData->atn;
}




void RQLLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  rqllexerLexerInitialize();
#else
  ::antlr4::internal::call_once(rqllexerLexerOnceFlag, rqllexerLexerInitialize);
#endif
}
