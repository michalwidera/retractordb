
// Generated from RQL.g4 by ANTLR 4.13.1


#include "RQLLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct RQLLexerStaticData final {
  RQLLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  RQLLexerStaticData(const RQLLexerStaticData&) = delete;
  RQLLexerStaticData(RQLLexerStaticData&&) = delete;
  RQLLexerStaticData& operator=(const RQLLexerStaticData&) = delete;
  RQLLexerStaticData& operator=(RQLLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag rqllexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
RQLLexerStaticData *rqllexerLexerStaticData = nullptr;

void rqllexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (rqllexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(rqllexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<RQLLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "BYTE_T", "STRING_T", "UNSIGNED_T", "INTEGER_T", 
      "FLOAT_T", "DOUBLE_T", "SELECT", "STREAM", "FROM", "DECLARE", "COUNT", 
      "SEGMENTS", "FILE", "STORAGE", "MIN", "MAX", "AVG", "SUMC", "ID", 
      "STRING", "FLOAT", "DECIMAL", "REAL", "EQUAL", "GREATER", "LESS", 
      "EXCLAMATION", "DOUBLE_BAR", "DOT", "UNDERLINE", "AT", "SHARP", "AND", 
      "MOD", "DOLLAR", "COMMA", "SEMI", "COLON", "DOUBLE_COLON", "STAR", 
      "DIVIDE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_XOR", "SPACE", 
      "COMMENT", "LINE_COMMENT1", "LINE_COMMENT2", "LETTER", "DEC_DOT_DEC", 
      "HEX_DIGIT", "DEC_DIGIT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'['", "']'", "'('", "')'", "'Sqrt'", "'Ceil'", "'Abs'", "'Floor'", 
      "'Sign'", "'Chr'", "'Length'", "'ToNumber'", "'ToTimeStamp'", "'FloatCast'", 
      "'IntCast'", "'Count'", "'Crc'", "'Sum'", "'IsZero'", "'IsNonZero'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "'='", "'>'", "'<'", "'!'", "'||'", "'.'", 
      "'_'", "'@'", "'#'", "'&'", "'%'", "'$'", "','", "';'", "':'", "'::'", 
      "'*'", "'/'", "'+'", "'-'", "'~'", "'|'", "'^'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "BYTE_T", "STRING_T", "UNSIGNED_T", "INTEGER_T", "FLOAT_T", 
      "DOUBLE_T", "SELECT", "STREAM", "FROM", "DECLARE", "COUNT", "SEGMENTS", 
      "FILE", "STORAGE", "MIN", "MAX", "AVG", "SUMC", "ID", "STRING", "FLOAT", 
      "DECIMAL", "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", "DOUBLE_BAR", 
      "DOT", "UNDERLINE", "AT", "SHARP", "AND", "MOD", "DOLLAR", "COMMA", 
      "SEMI", "COLON", "DOUBLE_COLON", "STAR", "DIVIDE", "PLUS", "MINUS", 
      "BIT_NOT", "BIT_OR", "BIT_XOR", "SPACE", "COMMENT", "LINE_COMMENT1", 
      "LINE_COMMENT2"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,70,653,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,
  	4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
  	1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
  	1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
  	1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
  	1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,
  	1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,3,20,280,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,3,21,294,8,21,1,22,1,22,1,22,1,22,1,22,1,22,
  	1,22,1,22,3,22,304,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,3,23,320,8,23,1,24,1,24,1,24,1,24,1,24,1,24,
  	1,24,1,24,1,24,1,24,3,24,332,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,3,25,346,8,25,1,26,1,26,1,26,1,26,1,26,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,26,3,26,360,8,26,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,374,8,27,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,3,28,384,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
  	1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,400,8,29,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,3,30,412,8,30,1,31,1,31,1,31,1,31,1,31,
  	1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,430,8,31,
  	1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,440,8,32,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,456,8,33,
  	1,34,1,34,1,34,1,34,1,34,1,34,3,34,464,8,34,1,35,1,35,1,35,1,35,1,35,
  	1,35,3,35,472,8,35,1,36,1,36,1,36,1,36,1,36,1,36,3,36,480,8,36,1,37,1,
  	37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,490,8,37,1,38,1,38,5,38,494,8,38,
  	10,38,12,38,497,9,38,1,39,1,39,1,39,1,39,5,39,503,8,39,10,39,12,39,506,
  	9,39,1,39,1,39,1,40,1,40,1,41,4,41,513,8,41,11,41,12,41,514,1,42,1,42,
  	3,42,519,8,42,1,42,1,42,3,42,523,8,42,1,42,4,42,526,8,42,11,42,12,42,
  	527,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,48,1,48,
  	1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,
  	1,56,1,56,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,
  	1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,4,66,579,8,66,11,66,12,66,580,
  	1,66,1,66,1,67,1,67,1,67,1,67,1,67,5,67,590,8,67,10,67,12,67,593,9,67,
  	1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,5,68,604,8,68,10,68,12,68,
  	607,9,68,1,68,1,68,1,69,1,69,1,69,1,69,5,69,615,8,69,10,69,12,69,618,
  	9,69,1,69,1,69,1,70,1,70,1,71,4,71,625,8,71,11,71,12,71,626,1,71,1,71,
  	4,71,631,8,71,11,71,12,71,632,1,71,4,71,636,8,71,11,71,12,71,637,1,71,
  	1,71,1,71,1,71,4,71,644,8,71,11,71,12,71,645,3,71,648,8,71,1,72,1,72,
  	1,73,1,73,1,591,0,74,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
  	11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
  	45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
  	34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,
  	91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,
  	56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,
  	66,133,67,135,68,137,69,139,70,141,0,143,0,145,0,147,0,1,0,9,2,0,65,90,
  	97,122,5,0,36,36,48,57,65,90,95,95,97,122,1,0,39,39,2,0,43,43,45,45,3,
  	0,9,10,13,13,32,32,2,0,10,10,13,13,2,0,65,90,95,95,2,0,48,57,65,70,1,
  	0,48,57,686,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
  	0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,
  	21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
  	0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
  	0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
  	53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
  	0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
  	0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
  	85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,
  	0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,
  	0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,
  	0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,
  	0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,
  	0,0,0,137,1,0,0,0,0,139,1,0,0,0,1,149,1,0,0,0,3,151,1,0,0,0,5,153,1,0,
  	0,0,7,155,1,0,0,0,9,157,1,0,0,0,11,162,1,0,0,0,13,167,1,0,0,0,15,171,
  	1,0,0,0,17,177,1,0,0,0,19,182,1,0,0,0,21,186,1,0,0,0,23,193,1,0,0,0,25,
  	202,1,0,0,0,27,214,1,0,0,0,29,224,1,0,0,0,31,232,1,0,0,0,33,238,1,0,0,
  	0,35,242,1,0,0,0,37,246,1,0,0,0,39,253,1,0,0,0,41,279,1,0,0,0,43,293,
  	1,0,0,0,45,303,1,0,0,0,47,319,1,0,0,0,49,331,1,0,0,0,51,345,1,0,0,0,53,
  	359,1,0,0,0,55,373,1,0,0,0,57,383,1,0,0,0,59,399,1,0,0,0,61,411,1,0,0,
  	0,63,429,1,0,0,0,65,439,1,0,0,0,67,455,1,0,0,0,69,463,1,0,0,0,71,471,
  	1,0,0,0,73,479,1,0,0,0,75,489,1,0,0,0,77,491,1,0,0,0,79,498,1,0,0,0,81,
  	509,1,0,0,0,83,512,1,0,0,0,85,518,1,0,0,0,87,529,1,0,0,0,89,531,1,0,0,
  	0,91,533,1,0,0,0,93,535,1,0,0,0,95,537,1,0,0,0,97,540,1,0,0,0,99,542,
  	1,0,0,0,101,544,1,0,0,0,103,546,1,0,0,0,105,548,1,0,0,0,107,550,1,0,0,
  	0,109,552,1,0,0,0,111,554,1,0,0,0,113,556,1,0,0,0,115,558,1,0,0,0,117,
  	560,1,0,0,0,119,563,1,0,0,0,121,565,1,0,0,0,123,567,1,0,0,0,125,569,1,
  	0,0,0,127,571,1,0,0,0,129,573,1,0,0,0,131,575,1,0,0,0,133,578,1,0,0,0,
  	135,584,1,0,0,0,137,599,1,0,0,0,139,610,1,0,0,0,141,621,1,0,0,0,143,647,
  	1,0,0,0,145,649,1,0,0,0,147,651,1,0,0,0,149,150,5,91,0,0,150,2,1,0,0,
  	0,151,152,5,93,0,0,152,4,1,0,0,0,153,154,5,40,0,0,154,6,1,0,0,0,155,156,
  	5,41,0,0,156,8,1,0,0,0,157,158,5,83,0,0,158,159,5,113,0,0,159,160,5,114,
  	0,0,160,161,5,116,0,0,161,10,1,0,0,0,162,163,5,67,0,0,163,164,5,101,0,
  	0,164,165,5,105,0,0,165,166,5,108,0,0,166,12,1,0,0,0,167,168,5,65,0,0,
  	168,169,5,98,0,0,169,170,5,115,0,0,170,14,1,0,0,0,171,172,5,70,0,0,172,
  	173,5,108,0,0,173,174,5,111,0,0,174,175,5,111,0,0,175,176,5,114,0,0,176,
  	16,1,0,0,0,177,178,5,83,0,0,178,179,5,105,0,0,179,180,5,103,0,0,180,181,
  	5,110,0,0,181,18,1,0,0,0,182,183,5,67,0,0,183,184,5,104,0,0,184,185,5,
  	114,0,0,185,20,1,0,0,0,186,187,5,76,0,0,187,188,5,101,0,0,188,189,5,110,
  	0,0,189,190,5,103,0,0,190,191,5,116,0,0,191,192,5,104,0,0,192,22,1,0,
  	0,0,193,194,5,84,0,0,194,195,5,111,0,0,195,196,5,78,0,0,196,197,5,117,
  	0,0,197,198,5,109,0,0,198,199,5,98,0,0,199,200,5,101,0,0,200,201,5,114,
  	0,0,201,24,1,0,0,0,202,203,5,84,0,0,203,204,5,111,0,0,204,205,5,84,0,
  	0,205,206,5,105,0,0,206,207,5,109,0,0,207,208,5,101,0,0,208,209,5,83,
  	0,0,209,210,5,116,0,0,210,211,5,97,0,0,211,212,5,109,0,0,212,213,5,112,
  	0,0,213,26,1,0,0,0,214,215,5,70,0,0,215,216,5,108,0,0,216,217,5,111,0,
  	0,217,218,5,97,0,0,218,219,5,116,0,0,219,220,5,67,0,0,220,221,5,97,0,
  	0,221,222,5,115,0,0,222,223,5,116,0,0,223,28,1,0,0,0,224,225,5,73,0,0,
  	225,226,5,110,0,0,226,227,5,116,0,0,227,228,5,67,0,0,228,229,5,97,0,0,
  	229,230,5,115,0,0,230,231,5,116,0,0,231,30,1,0,0,0,232,233,5,67,0,0,233,
  	234,5,111,0,0,234,235,5,117,0,0,235,236,5,110,0,0,236,237,5,116,0,0,237,
  	32,1,0,0,0,238,239,5,67,0,0,239,240,5,114,0,0,240,241,5,99,0,0,241,34,
  	1,0,0,0,242,243,5,83,0,0,243,244,5,117,0,0,244,245,5,109,0,0,245,36,1,
  	0,0,0,246,247,5,73,0,0,247,248,5,115,0,0,248,249,5,90,0,0,249,250,5,101,
  	0,0,250,251,5,114,0,0,251,252,5,111,0,0,252,38,1,0,0,0,253,254,5,73,0,
  	0,254,255,5,115,0,0,255,256,5,78,0,0,256,257,5,111,0,0,257,258,5,110,
  	0,0,258,259,5,90,0,0,259,260,5,101,0,0,260,261,5,114,0,0,261,262,5,111,
  	0,0,262,40,1,0,0,0,263,264,5,66,0,0,264,265,5,89,0,0,265,266,5,84,0,0,
  	266,280,5,69,0,0,267,268,5,66,0,0,268,269,5,121,0,0,269,270,5,116,0,0,
  	270,280,5,101,0,0,271,272,5,67,0,0,272,273,5,72,0,0,273,274,5,65,0,0,
  	274,280,5,82,0,0,275,276,5,67,0,0,276,277,5,104,0,0,277,278,5,97,0,0,
  	278,280,5,114,0,0,279,263,1,0,0,0,279,267,1,0,0,0,279,271,1,0,0,0,279,
  	275,1,0,0,0,280,42,1,0,0,0,281,282,5,83,0,0,282,283,5,84,0,0,283,284,
  	5,82,0,0,284,285,5,73,0,0,285,286,5,78,0,0,286,294,5,71,0,0,287,288,5,
  	83,0,0,288,289,5,116,0,0,289,290,5,114,0,0,290,291,5,105,0,0,291,292,
  	5,110,0,0,292,294,5,103,0,0,293,281,1,0,0,0,293,287,1,0,0,0,294,44,1,
  	0,0,0,295,296,5,85,0,0,296,297,5,73,0,0,297,298,5,78,0,0,298,304,5,84,
  	0,0,299,300,5,85,0,0,300,301,5,105,0,0,301,302,5,110,0,0,302,304,5,116,
  	0,0,303,295,1,0,0,0,303,299,1,0,0,0,304,46,1,0,0,0,305,306,5,73,0,0,306,
  	307,5,78,0,0,307,308,5,84,0,0,308,309,5,69,0,0,309,310,5,71,0,0,310,311,
  	5,69,0,0,311,320,5,82,0,0,312,313,5,73,0,0,313,314,5,110,0,0,314,315,
  	5,116,0,0,315,316,5,101,0,0,316,317,5,103,0,0,317,318,5,101,0,0,318,320,
  	5,114,0,0,319,305,1,0,0,0,319,312,1,0,0,0,320,48,1,0,0,0,321,322,5,70,
  	0,0,322,323,5,76,0,0,323,324,5,79,0,0,324,325,5,65,0,0,325,332,5,84,0,
  	0,326,327,5,70,0,0,327,328,5,108,0,0,328,329,5,111,0,0,329,330,5,97,0,
  	0,330,332,5,116,0,0,331,321,1,0,0,0,331,326,1,0,0,0,332,50,1,0,0,0,333,
  	334,5,68,0,0,334,335,5,79,0,0,335,336,5,85,0,0,336,337,5,66,0,0,337,338,
  	5,76,0,0,338,346,5,69,0,0,339,340,5,68,0,0,340,341,5,111,0,0,341,342,
  	5,117,0,0,342,343,5,98,0,0,343,344,5,108,0,0,344,346,5,101,0,0,345,333,
  	1,0,0,0,345,339,1,0,0,0,346,52,1,0,0,0,347,348,5,83,0,0,348,349,5,69,
  	0,0,349,350,5,76,0,0,350,351,5,69,0,0,351,352,5,67,0,0,352,360,5,84,0,
  	0,353,354,5,115,0,0,354,355,5,101,0,0,355,356,5,108,0,0,356,357,5,101,
  	0,0,357,358,5,99,0,0,358,360,5,116,0,0,359,347,1,0,0,0,359,353,1,0,0,
  	0,360,54,1,0,0,0,361,362,5,83,0,0,362,363,5,84,0,0,363,364,5,82,0,0,364,
  	365,5,69,0,0,365,366,5,65,0,0,366,374,5,77,0,0,367,368,5,115,0,0,368,
  	369,5,116,0,0,369,370,5,114,0,0,370,371,5,101,0,0,371,372,5,97,0,0,372,
  	374,5,109,0,0,373,361,1,0,0,0,373,367,1,0,0,0,374,56,1,0,0,0,375,376,
  	5,70,0,0,376,377,5,82,0,0,377,378,5,79,0,0,378,384,5,77,0,0,379,380,5,
  	102,0,0,380,381,5,114,0,0,381,382,5,111,0,0,382,384,5,109,0,0,383,375,
  	1,0,0,0,383,379,1,0,0,0,384,58,1,0,0,0,385,386,5,68,0,0,386,387,5,69,
  	0,0,387,388,5,67,0,0,388,389,5,76,0,0,389,390,5,65,0,0,390,391,5,82,0,
  	0,391,400,5,69,0,0,392,393,5,100,0,0,393,394,5,101,0,0,394,395,5,99,0,
  	0,395,396,5,108,0,0,396,397,5,97,0,0,397,398,5,114,0,0,398,400,5,101,
  	0,0,399,385,1,0,0,0,399,392,1,0,0,0,400,60,1,0,0,0,401,402,5,67,0,0,402,
  	403,5,79,0,0,403,404,5,85,0,0,404,405,5,78,0,0,405,412,5,84,0,0,406,407,
  	5,99,0,0,407,408,5,111,0,0,408,409,5,117,0,0,409,410,5,110,0,0,410,412,
  	5,116,0,0,411,401,1,0,0,0,411,406,1,0,0,0,412,62,1,0,0,0,413,414,5,83,
  	0,0,414,415,5,69,0,0,415,416,5,71,0,0,416,417,5,77,0,0,417,418,5,69,0,
  	0,418,419,5,78,0,0,419,420,5,84,0,0,420,430,5,83,0,0,421,422,5,115,0,
  	0,422,423,5,101,0,0,423,424,5,103,0,0,424,425,5,109,0,0,425,426,5,101,
  	0,0,426,427,5,110,0,0,427,428,5,116,0,0,428,430,5,115,0,0,429,413,1,0,
  	0,0,429,421,1,0,0,0,430,64,1,0,0,0,431,432,5,70,0,0,432,433,5,73,0,0,
  	433,434,5,76,0,0,434,440,5,69,0,0,435,436,5,102,0,0,436,437,5,105,0,0,
  	437,438,5,108,0,0,438,440,5,101,0,0,439,431,1,0,0,0,439,435,1,0,0,0,440,
  	66,1,0,0,0,441,442,5,83,0,0,442,443,5,84,0,0,443,444,5,79,0,0,444,445,
  	5,82,0,0,445,446,5,65,0,0,446,447,5,71,0,0,447,456,5,69,0,0,448,449,5,
  	115,0,0,449,450,5,116,0,0,450,451,5,111,0,0,451,452,5,114,0,0,452,453,
  	5,97,0,0,453,454,5,103,0,0,454,456,5,101,0,0,455,441,1,0,0,0,455,448,
  	1,0,0,0,456,68,1,0,0,0,457,458,5,77,0,0,458,459,5,73,0,0,459,464,5,78,
  	0,0,460,461,5,109,0,0,461,462,5,105,0,0,462,464,5,110,0,0,463,457,1,0,
  	0,0,463,460,1,0,0,0,464,70,1,0,0,0,465,466,5,77,0,0,466,467,5,65,0,0,
  	467,472,5,88,0,0,468,469,5,109,0,0,469,470,5,97,0,0,470,472,5,120,0,0,
  	471,465,1,0,0,0,471,468,1,0,0,0,472,72,1,0,0,0,473,474,5,65,0,0,474,475,
  	5,86,0,0,475,480,5,71,0,0,476,477,5,97,0,0,477,478,5,118,0,0,478,480,
  	5,103,0,0,479,473,1,0,0,0,479,476,1,0,0,0,480,74,1,0,0,0,481,482,5,83,
  	0,0,482,483,5,85,0,0,483,484,5,77,0,0,484,490,5,67,0,0,485,486,5,115,
  	0,0,486,487,5,117,0,0,487,488,5,109,0,0,488,490,5,99,0,0,489,481,1,0,
  	0,0,489,485,1,0,0,0,490,76,1,0,0,0,491,495,7,0,0,0,492,494,7,1,0,0,493,
  	492,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,496,78,1,
  	0,0,0,497,495,1,0,0,0,498,504,5,39,0,0,499,503,8,2,0,0,500,501,5,39,0,
  	0,501,503,5,39,0,0,502,499,1,0,0,0,502,500,1,0,0,0,503,506,1,0,0,0,504,
  	502,1,0,0,0,504,505,1,0,0,0,505,507,1,0,0,0,506,504,1,0,0,0,507,508,5,
  	39,0,0,508,80,1,0,0,0,509,510,3,143,71,0,510,82,1,0,0,0,511,513,3,147,
  	73,0,512,511,1,0,0,0,513,514,1,0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,
  	515,84,1,0,0,0,516,519,3,83,41,0,517,519,3,143,71,0,518,516,1,0,0,0,518,
  	517,1,0,0,0,519,520,1,0,0,0,520,522,5,69,0,0,521,523,7,3,0,0,522,521,
  	1,0,0,0,522,523,1,0,0,0,523,525,1,0,0,0,524,526,3,147,73,0,525,524,1,
  	0,0,0,526,527,1,0,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,86,1,0,0,0,
  	529,530,5,61,0,0,530,88,1,0,0,0,531,532,5,62,0,0,532,90,1,0,0,0,533,534,
  	5,60,0,0,534,92,1,0,0,0,535,536,5,33,0,0,536,94,1,0,0,0,537,538,5,124,
  	0,0,538,539,5,124,0,0,539,96,1,0,0,0,540,541,5,46,0,0,541,98,1,0,0,0,
  	542,543,5,95,0,0,543,100,1,0,0,0,544,545,5,64,0,0,545,102,1,0,0,0,546,
  	547,5,35,0,0,547,104,1,0,0,0,548,549,5,38,0,0,549,106,1,0,0,0,550,551,
  	5,37,0,0,551,108,1,0,0,0,552,553,5,36,0,0,553,110,1,0,0,0,554,555,5,44,
  	0,0,555,112,1,0,0,0,556,557,5,59,0,0,557,114,1,0,0,0,558,559,5,58,0,0,
  	559,116,1,0,0,0,560,561,5,58,0,0,561,562,5,58,0,0,562,118,1,0,0,0,563,
  	564,5,42,0,0,564,120,1,0,0,0,565,566,5,47,0,0,566,122,1,0,0,0,567,568,
  	5,43,0,0,568,124,1,0,0,0,569,570,5,45,0,0,570,126,1,0,0,0,571,572,5,126,
  	0,0,572,128,1,0,0,0,573,574,5,124,0,0,574,130,1,0,0,0,575,576,5,94,0,
  	0,576,132,1,0,0,0,577,579,7,4,0,0,578,577,1,0,0,0,579,580,1,0,0,0,580,
  	578,1,0,0,0,580,581,1,0,0,0,581,582,1,0,0,0,582,583,6,66,0,0,583,134,
  	1,0,0,0,584,585,5,47,0,0,585,586,5,42,0,0,586,591,1,0,0,0,587,590,3,135,
  	67,0,588,590,9,0,0,0,589,587,1,0,0,0,589,588,1,0,0,0,590,593,1,0,0,0,
  	591,592,1,0,0,0,591,589,1,0,0,0,592,594,1,0,0,0,593,591,1,0,0,0,594,595,
  	5,42,0,0,595,596,5,47,0,0,596,597,1,0,0,0,597,598,6,67,1,0,598,136,1,
  	0,0,0,599,600,5,35,0,0,600,601,5,32,0,0,601,605,1,0,0,0,602,604,8,5,0,
  	0,603,602,1,0,0,0,604,607,1,0,0,0,605,603,1,0,0,0,605,606,1,0,0,0,606,
  	608,1,0,0,0,607,605,1,0,0,0,608,609,6,68,1,0,609,138,1,0,0,0,610,611,
  	5,47,0,0,611,612,5,47,0,0,612,616,1,0,0,0,613,615,8,5,0,0,614,613,1,0,
  	0,0,615,618,1,0,0,0,616,614,1,0,0,0,616,617,1,0,0,0,617,619,1,0,0,0,618,
  	616,1,0,0,0,619,620,6,69,1,0,620,140,1,0,0,0,621,622,7,6,0,0,622,142,
  	1,0,0,0,623,625,3,147,73,0,624,623,1,0,0,0,625,626,1,0,0,0,626,624,1,
  	0,0,0,626,627,1,0,0,0,627,628,1,0,0,0,628,630,5,46,0,0,629,631,3,147,
  	73,0,630,629,1,0,0,0,631,632,1,0,0,0,632,630,1,0,0,0,632,633,1,0,0,0,
  	633,648,1,0,0,0,634,636,3,147,73,0,635,634,1,0,0,0,636,637,1,0,0,0,637,
  	635,1,0,0,0,637,638,1,0,0,0,638,639,1,0,0,0,639,640,5,46,0,0,640,648,
  	1,0,0,0,641,643,5,46,0,0,642,644,3,147,73,0,643,642,1,0,0,0,644,645,1,
  	0,0,0,645,643,1,0,0,0,645,646,1,0,0,0,646,648,1,0,0,0,647,624,1,0,0,0,
  	647,635,1,0,0,0,647,641,1,0,0,0,648,144,1,0,0,0,649,650,7,7,0,0,650,146,
  	1,0,0,0,651,652,7,8,0,0,652,148,1,0,0,0,36,0,279,293,303,319,331,345,
  	359,373,383,399,411,429,439,455,463,471,479,489,495,502,504,514,518,522,
  	527,580,589,591,605,616,626,632,637,645,647,2,6,0,0,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  rqllexerLexerStaticData = staticData.release();
}

}

RQLLexer::RQLLexer(CharStream *input) : Lexer(input) {
  RQLLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *rqllexerLexerStaticData->atn, rqllexerLexerStaticData->decisionToDFA, rqllexerLexerStaticData->sharedContextCache);
}

RQLLexer::~RQLLexer() {
  delete _interpreter;
}

std::string RQLLexer::getGrammarFileName() const {
  return "RQL.g4";
}

const std::vector<std::string>& RQLLexer::getRuleNames() const {
  return rqllexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& RQLLexer::getChannelNames() const {
  return rqllexerLexerStaticData->channelNames;
}

const std::vector<std::string>& RQLLexer::getModeNames() const {
  return rqllexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& RQLLexer::getVocabulary() const {
  return rqllexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView RQLLexer::getSerializedATN() const {
  return rqllexerLexerStaticData->serializedATN;
}

const atn::ATN& RQLLexer::getATN() const {
  return *rqllexerLexerStaticData->atn;
}




void RQLLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  rqllexerLexerInitialize();
#else
  ::antlr4::internal::call_once(rqllexerLexerOnceFlag, rqllexerLexerInitialize);
#endif
}
