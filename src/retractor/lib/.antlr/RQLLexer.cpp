
// Generated from RQL.g4 by ANTLR 4.13.1


#include "RQLLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct RQLLexerStaticData final {
  RQLLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  RQLLexerStaticData(const RQLLexerStaticData&) = delete;
  RQLLexerStaticData(RQLLexerStaticData&&) = delete;
  RQLLexerStaticData& operator=(const RQLLexerStaticData&) = delete;
  RQLLexerStaticData& operator=(RQLLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag rqllexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
RQLLexerStaticData *rqllexerLexerStaticData = nullptr;

void rqllexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (rqllexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(rqllexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<RQLLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "BYTE_T", "STRING_T", "UNSIGNED_T", "INTEGER_T", 
      "FLOAT_T", "DOUBLE_T", "SELECT", "STREAM", "FROM", "DECLARE", "RETENTION", 
      "FILE", "STORAGE", "SUBSTRAT", "MIN", "MAX", "AVG", "SUMC", "STRING_SUBSTRAT", 
      "ID", "STRING", "FLOAT", "DECIMAL", "REAL", "EQUAL", "GREATER", "LESS", 
      "EXCLAMATION", "DOUBLE_BAR", "DOT", "UNDERLINE", "AT", "SHARP", "AND", 
      "MOD", "DOLLAR", "COMMA", "SEMI", "COLON", "DOUBLE_COLON", "STAR", 
      "DIVIDE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_XOR", "SPACE", 
      "COMMENT", "LINE_COMMENT1", "LINE_COMMENT2", "LETTER", "DEC_DOT_DEC", 
      "HEX_DIGIT", "DEC_DIGIT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'['", "']'", "'('", "')'", "'Sqrt'", "'Ceil'", "'Abs'", "'Floor'", 
      "'Sign'", "'Chr'", "'Length'", "'ToNumber'", "'ToTimeStamp'", "'FloatCast'", 
      "'IntCast'", "'Count'", "'Crc'", "'Sum'", "'IsZero'", "'IsNonZero'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "'='", "'>'", "'<'", "'!'", "'||'", "'.'", 
      "'_'", "'@'", "'#'", "'&'", "'%'", "'$'", "','", "';'", "':'", "'::'", 
      "'*'", "'/'", "'+'", "'-'", "'~'", "'|'", "'^'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "BYTE_T", "STRING_T", "UNSIGNED_T", "INTEGER_T", "FLOAT_T", 
      "DOUBLE_T", "SELECT", "STREAM", "FROM", "DECLARE", "RETENTION", "FILE", 
      "STORAGE", "SUBSTRAT", "MIN", "MAX", "AVG", "SUMC", "STRING_SUBSTRAT", 
      "ID", "STRING", "FLOAT", "DECIMAL", "REAL", "EQUAL", "GREATER", "LESS", 
      "EXCLAMATION", "DOUBLE_BAR", "DOT", "UNDERLINE", "AT", "SHARP", "AND", 
      "MOD", "DOLLAR", "COMMA", "SEMI", "COLON", "DOUBLE_COLON", "STAR", 
      "DIVIDE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_XOR", "SPACE", 
      "COMMENT", "LINE_COMMENT1", "LINE_COMMENT2"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,71,750,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,1,0,1,0,1,1,1,1,1,2,1,2,
  	1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,
  	7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
  	1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
  	1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
  	1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
  	1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
  	1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,3,20,282,8,20,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,296,8,21,1,22,1,22,1,22,1,22,
  	1,22,1,22,1,22,1,22,3,22,306,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,322,8,23,1,24,1,24,1,24,1,24,
  	1,24,1,24,1,24,1,24,1,24,1,24,3,24,334,8,24,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,348,8,25,1,26,1,26,1,26,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,362,8,26,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,376,8,27,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,3,28,386,8,28,1,29,1,29,1,29,1,29,1,29,
  	1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,402,8,29,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,3,30,422,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,
  	432,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
  	1,32,1,32,3,32,448,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,466,8,33,1,34,1,34,1,34,1,34,
  	1,34,1,34,3,34,474,8,34,1,35,1,35,1,35,1,35,1,35,1,35,3,35,482,8,35,1,
  	36,1,36,1,36,1,36,1,36,1,36,3,36,490,8,36,1,37,1,37,1,37,1,37,1,37,1,
  	37,1,37,1,37,3,37,500,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
  	38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
  	38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
  	38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
  	38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
  	38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
  	38,1,38,1,38,1,38,1,38,3,38,585,8,38,1,38,1,38,1,39,1,39,5,39,591,8,39,
  	10,39,12,39,594,9,39,1,40,1,40,1,40,1,40,5,40,600,8,40,10,40,12,40,603,
  	9,40,1,40,1,40,1,41,1,41,1,42,4,42,610,8,42,11,42,12,42,611,1,43,1,43,
  	3,43,616,8,43,1,43,1,43,3,43,620,8,43,1,43,4,43,623,8,43,11,43,12,43,
  	624,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,49,1,49,
  	1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,
  	1,57,1,57,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,
  	1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,4,67,676,8,67,11,67,12,67,677,
  	1,67,1,67,1,68,1,68,1,68,1,68,1,68,5,68,687,8,68,10,68,12,68,690,9,68,
  	1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,5,69,701,8,69,10,69,12,69,
  	704,9,69,1,69,1,69,1,70,1,70,1,70,1,70,5,70,712,8,70,10,70,12,70,715,
  	9,70,1,70,1,70,1,71,1,71,1,72,4,72,722,8,72,11,72,12,72,723,1,72,1,72,
  	4,72,728,8,72,11,72,12,72,729,1,72,4,72,733,8,72,11,72,12,72,734,1,72,
  	1,72,1,72,1,72,4,72,741,8,72,11,72,12,72,742,3,72,745,8,72,1,73,1,73,
  	1,74,1,74,1,688,0,75,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
  	11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
  	45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
  	34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,
  	91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,
  	56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,
  	66,133,67,135,68,137,69,139,70,141,71,143,0,145,0,147,0,149,0,1,0,9,2,
  	0,65,90,97,122,5,0,36,36,48,57,65,90,95,95,97,122,1,0,39,39,2,0,43,43,
  	45,45,3,0,9,10,13,13,32,32,2,0,10,10,13,13,2,0,65,90,95,95,2,0,48,57,
  	65,70,1,0,48,57,794,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
  	9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
  	0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
  	0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,
  	41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
  	0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
  	0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
  	73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,
  	0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
  	0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,
  	0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,
  	0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,
  	0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,
  	0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,1,151,1,0,0,0,
  	3,153,1,0,0,0,5,155,1,0,0,0,7,157,1,0,0,0,9,159,1,0,0,0,11,164,1,0,0,
  	0,13,169,1,0,0,0,15,173,1,0,0,0,17,179,1,0,0,0,19,184,1,0,0,0,21,188,
  	1,0,0,0,23,195,1,0,0,0,25,204,1,0,0,0,27,216,1,0,0,0,29,226,1,0,0,0,31,
  	234,1,0,0,0,33,240,1,0,0,0,35,244,1,0,0,0,37,248,1,0,0,0,39,255,1,0,0,
  	0,41,281,1,0,0,0,43,295,1,0,0,0,45,305,1,0,0,0,47,321,1,0,0,0,49,333,
  	1,0,0,0,51,347,1,0,0,0,53,361,1,0,0,0,55,375,1,0,0,0,57,385,1,0,0,0,59,
  	401,1,0,0,0,61,421,1,0,0,0,63,431,1,0,0,0,65,447,1,0,0,0,67,465,1,0,0,
  	0,69,473,1,0,0,0,71,481,1,0,0,0,73,489,1,0,0,0,75,499,1,0,0,0,77,501,
  	1,0,0,0,79,588,1,0,0,0,81,595,1,0,0,0,83,606,1,0,0,0,85,609,1,0,0,0,87,
  	615,1,0,0,0,89,626,1,0,0,0,91,628,1,0,0,0,93,630,1,0,0,0,95,632,1,0,0,
  	0,97,634,1,0,0,0,99,637,1,0,0,0,101,639,1,0,0,0,103,641,1,0,0,0,105,643,
  	1,0,0,0,107,645,1,0,0,0,109,647,1,0,0,0,111,649,1,0,0,0,113,651,1,0,0,
  	0,115,653,1,0,0,0,117,655,1,0,0,0,119,657,1,0,0,0,121,660,1,0,0,0,123,
  	662,1,0,0,0,125,664,1,0,0,0,127,666,1,0,0,0,129,668,1,0,0,0,131,670,1,
  	0,0,0,133,672,1,0,0,0,135,675,1,0,0,0,137,681,1,0,0,0,139,696,1,0,0,0,
  	141,707,1,0,0,0,143,718,1,0,0,0,145,744,1,0,0,0,147,746,1,0,0,0,149,748,
  	1,0,0,0,151,152,5,91,0,0,152,2,1,0,0,0,153,154,5,93,0,0,154,4,1,0,0,0,
  	155,156,5,40,0,0,156,6,1,0,0,0,157,158,5,41,0,0,158,8,1,0,0,0,159,160,
  	5,83,0,0,160,161,5,113,0,0,161,162,5,114,0,0,162,163,5,116,0,0,163,10,
  	1,0,0,0,164,165,5,67,0,0,165,166,5,101,0,0,166,167,5,105,0,0,167,168,
  	5,108,0,0,168,12,1,0,0,0,169,170,5,65,0,0,170,171,5,98,0,0,171,172,5,
  	115,0,0,172,14,1,0,0,0,173,174,5,70,0,0,174,175,5,108,0,0,175,176,5,111,
  	0,0,176,177,5,111,0,0,177,178,5,114,0,0,178,16,1,0,0,0,179,180,5,83,0,
  	0,180,181,5,105,0,0,181,182,5,103,0,0,182,183,5,110,0,0,183,18,1,0,0,
  	0,184,185,5,67,0,0,185,186,5,104,0,0,186,187,5,114,0,0,187,20,1,0,0,0,
  	188,189,5,76,0,0,189,190,5,101,0,0,190,191,5,110,0,0,191,192,5,103,0,
  	0,192,193,5,116,0,0,193,194,5,104,0,0,194,22,1,0,0,0,195,196,5,84,0,0,
  	196,197,5,111,0,0,197,198,5,78,0,0,198,199,5,117,0,0,199,200,5,109,0,
  	0,200,201,5,98,0,0,201,202,5,101,0,0,202,203,5,114,0,0,203,24,1,0,0,0,
  	204,205,5,84,0,0,205,206,5,111,0,0,206,207,5,84,0,0,207,208,5,105,0,0,
  	208,209,5,109,0,0,209,210,5,101,0,0,210,211,5,83,0,0,211,212,5,116,0,
  	0,212,213,5,97,0,0,213,214,5,109,0,0,214,215,5,112,0,0,215,26,1,0,0,0,
  	216,217,5,70,0,0,217,218,5,108,0,0,218,219,5,111,0,0,219,220,5,97,0,0,
  	220,221,5,116,0,0,221,222,5,67,0,0,222,223,5,97,0,0,223,224,5,115,0,0,
  	224,225,5,116,0,0,225,28,1,0,0,0,226,227,5,73,0,0,227,228,5,110,0,0,228,
  	229,5,116,0,0,229,230,5,67,0,0,230,231,5,97,0,0,231,232,5,115,0,0,232,
  	233,5,116,0,0,233,30,1,0,0,0,234,235,5,67,0,0,235,236,5,111,0,0,236,237,
  	5,117,0,0,237,238,5,110,0,0,238,239,5,116,0,0,239,32,1,0,0,0,240,241,
  	5,67,0,0,241,242,5,114,0,0,242,243,5,99,0,0,243,34,1,0,0,0,244,245,5,
  	83,0,0,245,246,5,117,0,0,246,247,5,109,0,0,247,36,1,0,0,0,248,249,5,73,
  	0,0,249,250,5,115,0,0,250,251,5,90,0,0,251,252,5,101,0,0,252,253,5,114,
  	0,0,253,254,5,111,0,0,254,38,1,0,0,0,255,256,5,73,0,0,256,257,5,115,0,
  	0,257,258,5,78,0,0,258,259,5,111,0,0,259,260,5,110,0,0,260,261,5,90,0,
  	0,261,262,5,101,0,0,262,263,5,114,0,0,263,264,5,111,0,0,264,40,1,0,0,
  	0,265,266,5,66,0,0,266,267,5,89,0,0,267,268,5,84,0,0,268,282,5,69,0,0,
  	269,270,5,66,0,0,270,271,5,121,0,0,271,272,5,116,0,0,272,282,5,101,0,
  	0,273,274,5,67,0,0,274,275,5,72,0,0,275,276,5,65,0,0,276,282,5,82,0,0,
  	277,278,5,67,0,0,278,279,5,104,0,0,279,280,5,97,0,0,280,282,5,114,0,0,
  	281,265,1,0,0,0,281,269,1,0,0,0,281,273,1,0,0,0,281,277,1,0,0,0,282,42,
  	1,0,0,0,283,284,5,83,0,0,284,285,5,84,0,0,285,286,5,82,0,0,286,287,5,
  	73,0,0,287,288,5,78,0,0,288,296,5,71,0,0,289,290,5,83,0,0,290,291,5,116,
  	0,0,291,292,5,114,0,0,292,293,5,105,0,0,293,294,5,110,0,0,294,296,5,103,
  	0,0,295,283,1,0,0,0,295,289,1,0,0,0,296,44,1,0,0,0,297,298,5,85,0,0,298,
  	299,5,73,0,0,299,300,5,78,0,0,300,306,5,84,0,0,301,302,5,85,0,0,302,303,
  	5,105,0,0,303,304,5,110,0,0,304,306,5,116,0,0,305,297,1,0,0,0,305,301,
  	1,0,0,0,306,46,1,0,0,0,307,308,5,73,0,0,308,309,5,78,0,0,309,310,5,84,
  	0,0,310,311,5,69,0,0,311,312,5,71,0,0,312,313,5,69,0,0,313,322,5,82,0,
  	0,314,315,5,73,0,0,315,316,5,110,0,0,316,317,5,116,0,0,317,318,5,101,
  	0,0,318,319,5,103,0,0,319,320,5,101,0,0,320,322,5,114,0,0,321,307,1,0,
  	0,0,321,314,1,0,0,0,322,48,1,0,0,0,323,324,5,70,0,0,324,325,5,76,0,0,
  	325,326,5,79,0,0,326,327,5,65,0,0,327,334,5,84,0,0,328,329,5,70,0,0,329,
  	330,5,108,0,0,330,331,5,111,0,0,331,332,5,97,0,0,332,334,5,116,0,0,333,
  	323,1,0,0,0,333,328,1,0,0,0,334,50,1,0,0,0,335,336,5,68,0,0,336,337,5,
  	79,0,0,337,338,5,85,0,0,338,339,5,66,0,0,339,340,5,76,0,0,340,348,5,69,
  	0,0,341,342,5,68,0,0,342,343,5,111,0,0,343,344,5,117,0,0,344,345,5,98,
  	0,0,345,346,5,108,0,0,346,348,5,101,0,0,347,335,1,0,0,0,347,341,1,0,0,
  	0,348,52,1,0,0,0,349,350,5,83,0,0,350,351,5,69,0,0,351,352,5,76,0,0,352,
  	353,5,69,0,0,353,354,5,67,0,0,354,362,5,84,0,0,355,356,5,115,0,0,356,
  	357,5,101,0,0,357,358,5,108,0,0,358,359,5,101,0,0,359,360,5,99,0,0,360,
  	362,5,116,0,0,361,349,1,0,0,0,361,355,1,0,0,0,362,54,1,0,0,0,363,364,
  	5,83,0,0,364,365,5,84,0,0,365,366,5,82,0,0,366,367,5,69,0,0,367,368,5,
  	65,0,0,368,376,5,77,0,0,369,370,5,115,0,0,370,371,5,116,0,0,371,372,5,
  	114,0,0,372,373,5,101,0,0,373,374,5,97,0,0,374,376,5,109,0,0,375,363,
  	1,0,0,0,375,369,1,0,0,0,376,56,1,0,0,0,377,378,5,70,0,0,378,379,5,82,
  	0,0,379,380,5,79,0,0,380,386,5,77,0,0,381,382,5,102,0,0,382,383,5,114,
  	0,0,383,384,5,111,0,0,384,386,5,109,0,0,385,377,1,0,0,0,385,381,1,0,0,
  	0,386,58,1,0,0,0,387,388,5,68,0,0,388,389,5,69,0,0,389,390,5,67,0,0,390,
  	391,5,76,0,0,391,392,5,65,0,0,392,393,5,82,0,0,393,402,5,69,0,0,394,395,
  	5,100,0,0,395,396,5,101,0,0,396,397,5,99,0,0,397,398,5,108,0,0,398,399,
  	5,97,0,0,399,400,5,114,0,0,400,402,5,101,0,0,401,387,1,0,0,0,401,394,
  	1,0,0,0,402,60,1,0,0,0,403,404,5,82,0,0,404,405,5,69,0,0,405,406,5,84,
  	0,0,406,407,5,69,0,0,407,408,5,78,0,0,408,409,5,84,0,0,409,410,5,73,0,
  	0,410,411,5,79,0,0,411,422,5,78,0,0,412,413,5,114,0,0,413,414,5,101,0,
  	0,414,415,5,116,0,0,415,416,5,101,0,0,416,417,5,110,0,0,417,418,5,116,
  	0,0,418,419,5,105,0,0,419,420,5,111,0,0,420,422,5,110,0,0,421,403,1,0,
  	0,0,421,412,1,0,0,0,422,62,1,0,0,0,423,424,5,70,0,0,424,425,5,73,0,0,
  	425,426,5,76,0,0,426,432,5,69,0,0,427,428,5,102,0,0,428,429,5,105,0,0,
  	429,430,5,108,0,0,430,432,5,101,0,0,431,423,1,0,0,0,431,427,1,0,0,0,432,
  	64,1,0,0,0,433,434,5,83,0,0,434,435,5,84,0,0,435,436,5,79,0,0,436,437,
  	5,82,0,0,437,438,5,65,0,0,438,439,5,71,0,0,439,448,5,69,0,0,440,441,5,
  	115,0,0,441,442,5,116,0,0,442,443,5,111,0,0,443,444,5,114,0,0,444,445,
  	5,97,0,0,445,446,5,103,0,0,446,448,5,101,0,0,447,433,1,0,0,0,447,440,
  	1,0,0,0,448,66,1,0,0,0,449,450,5,83,0,0,450,451,5,85,0,0,451,452,5,66,
  	0,0,452,453,5,83,0,0,453,454,5,84,0,0,454,455,5,82,0,0,455,456,5,65,0,
  	0,456,466,5,84,0,0,457,458,5,115,0,0,458,459,5,117,0,0,459,460,5,98,0,
  	0,460,461,5,115,0,0,461,462,5,116,0,0,462,463,5,114,0,0,463,464,5,97,
  	0,0,464,466,5,116,0,0,465,449,1,0,0,0,465,457,1,0,0,0,466,68,1,0,0,0,
  	467,468,5,77,0,0,468,469,5,73,0,0,469,474,5,78,0,0,470,471,5,109,0,0,
  	471,472,5,105,0,0,472,474,5,110,0,0,473,467,1,0,0,0,473,470,1,0,0,0,474,
  	70,1,0,0,0,475,476,5,77,0,0,476,477,5,65,0,0,477,482,5,88,0,0,478,479,
  	5,109,0,0,479,480,5,97,0,0,480,482,5,120,0,0,481,475,1,0,0,0,481,478,
  	1,0,0,0,482,72,1,0,0,0,483,484,5,65,0,0,484,485,5,86,0,0,485,490,5,71,
  	0,0,486,487,5,97,0,0,487,488,5,118,0,0,488,490,5,103,0,0,489,483,1,0,
  	0,0,489,486,1,0,0,0,490,74,1,0,0,0,491,492,5,83,0,0,492,493,5,85,0,0,
  	493,494,5,77,0,0,494,500,5,67,0,0,495,496,5,115,0,0,496,497,5,117,0,0,
  	497,498,5,109,0,0,498,500,5,99,0,0,499,491,1,0,0,0,499,495,1,0,0,0,500,
  	76,1,0,0,0,501,584,5,39,0,0,502,503,5,77,0,0,503,504,5,69,0,0,504,505,
  	5,77,0,0,505,506,5,79,0,0,506,507,5,82,0,0,507,585,5,89,0,0,508,509,5,
  	109,0,0,509,510,5,101,0,0,510,511,5,109,0,0,511,512,5,111,0,0,512,513,
  	5,114,0,0,513,585,5,121,0,0,514,515,5,68,0,0,515,516,5,69,0,0,516,517,
  	5,70,0,0,517,518,5,65,0,0,518,519,5,85,0,0,519,520,5,76,0,0,520,585,5,
  	84,0,0,521,522,5,100,0,0,522,523,5,101,0,0,523,524,5,102,0,0,524,525,
  	5,97,0,0,525,526,5,117,0,0,526,527,5,108,0,0,527,585,5,116,0,0,528,529,
  	5,80,0,0,529,530,5,79,0,0,530,531,5,83,0,0,531,532,5,73,0,0,532,585,5,
  	88,0,0,533,534,5,112,0,0,534,535,5,111,0,0,535,536,5,115,0,0,536,537,
  	5,105,0,0,537,585,5,120,0,0,538,539,5,71,0,0,539,540,5,69,0,0,540,541,
  	5,78,0,0,541,542,5,69,0,0,542,543,5,82,0,0,543,544,5,73,0,0,544,585,5,
  	67,0,0,545,546,5,103,0,0,546,547,5,101,0,0,547,548,5,110,0,0,548,549,
  	5,101,0,0,549,550,5,114,0,0,550,551,5,105,0,0,551,585,5,99,0,0,552,553,
  	5,68,0,0,553,554,5,69,0,0,554,555,5,86,0,0,555,556,5,73,0,0,556,557,5,
  	67,0,0,557,585,5,69,0,0,558,559,5,100,0,0,559,560,5,101,0,0,560,561,5,
  	118,0,0,561,562,5,105,0,0,562,563,5,99,0,0,563,585,5,101,0,0,564,565,
  	5,84,0,0,565,566,5,69,0,0,566,567,5,88,0,0,567,568,5,84,0,0,568,569,5,
  	83,0,0,569,570,5,79,0,0,570,571,5,85,0,0,571,572,5,82,0,0,572,573,5,67,
  	0,0,573,585,5,69,0,0,574,575,5,116,0,0,575,576,5,101,0,0,576,577,5,120,
  	0,0,577,578,5,116,0,0,578,579,5,115,0,0,579,580,5,111,0,0,580,581,5,117,
  	0,0,581,582,5,114,0,0,582,583,5,99,0,0,583,585,5,101,0,0,584,502,1,0,
  	0,0,584,508,1,0,0,0,584,514,1,0,0,0,584,521,1,0,0,0,584,528,1,0,0,0,584,
  	533,1,0,0,0,584,538,1,0,0,0,584,545,1,0,0,0,584,552,1,0,0,0,584,558,1,
  	0,0,0,584,564,1,0,0,0,584,574,1,0,0,0,585,586,1,0,0,0,586,587,5,39,0,
  	0,587,78,1,0,0,0,588,592,7,0,0,0,589,591,7,1,0,0,590,589,1,0,0,0,591,
  	594,1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,80,1,0,0,0,594,592,1,
  	0,0,0,595,601,5,39,0,0,596,600,8,2,0,0,597,598,5,39,0,0,598,600,5,39,
  	0,0,599,596,1,0,0,0,599,597,1,0,0,0,600,603,1,0,0,0,601,599,1,0,0,0,601,
  	602,1,0,0,0,602,604,1,0,0,0,603,601,1,0,0,0,604,605,5,39,0,0,605,82,1,
  	0,0,0,606,607,3,145,72,0,607,84,1,0,0,0,608,610,3,149,74,0,609,608,1,
  	0,0,0,610,611,1,0,0,0,611,609,1,0,0,0,611,612,1,0,0,0,612,86,1,0,0,0,
  	613,616,3,85,42,0,614,616,3,145,72,0,615,613,1,0,0,0,615,614,1,0,0,0,
  	616,617,1,0,0,0,617,619,5,69,0,0,618,620,7,3,0,0,619,618,1,0,0,0,619,
  	620,1,0,0,0,620,622,1,0,0,0,621,623,3,149,74,0,622,621,1,0,0,0,623,624,
  	1,0,0,0,624,622,1,0,0,0,624,625,1,0,0,0,625,88,1,0,0,0,626,627,5,61,0,
  	0,627,90,1,0,0,0,628,629,5,62,0,0,629,92,1,0,0,0,630,631,5,60,0,0,631,
  	94,1,0,0,0,632,633,5,33,0,0,633,96,1,0,0,0,634,635,5,124,0,0,635,636,
  	5,124,0,0,636,98,1,0,0,0,637,638,5,46,0,0,638,100,1,0,0,0,639,640,5,95,
  	0,0,640,102,1,0,0,0,641,642,5,64,0,0,642,104,1,0,0,0,643,644,5,35,0,0,
  	644,106,1,0,0,0,645,646,5,38,0,0,646,108,1,0,0,0,647,648,5,37,0,0,648,
  	110,1,0,0,0,649,650,5,36,0,0,650,112,1,0,0,0,651,652,5,44,0,0,652,114,
  	1,0,0,0,653,654,5,59,0,0,654,116,1,0,0,0,655,656,5,58,0,0,656,118,1,0,
  	0,0,657,658,5,58,0,0,658,659,5,58,0,0,659,120,1,0,0,0,660,661,5,42,0,
  	0,661,122,1,0,0,0,662,663,5,47,0,0,663,124,1,0,0,0,664,665,5,43,0,0,665,
  	126,1,0,0,0,666,667,5,45,0,0,667,128,1,0,0,0,668,669,5,126,0,0,669,130,
  	1,0,0,0,670,671,5,124,0,0,671,132,1,0,0,0,672,673,5,94,0,0,673,134,1,
  	0,0,0,674,676,7,4,0,0,675,674,1,0,0,0,676,677,1,0,0,0,677,675,1,0,0,0,
  	677,678,1,0,0,0,678,679,1,0,0,0,679,680,6,67,0,0,680,136,1,0,0,0,681,
  	682,5,47,0,0,682,683,5,42,0,0,683,688,1,0,0,0,684,687,3,137,68,0,685,
  	687,9,0,0,0,686,684,1,0,0,0,686,685,1,0,0,0,687,690,1,0,0,0,688,689,1,
  	0,0,0,688,686,1,0,0,0,689,691,1,0,0,0,690,688,1,0,0,0,691,692,5,42,0,
  	0,692,693,5,47,0,0,693,694,1,0,0,0,694,695,6,68,1,0,695,138,1,0,0,0,696,
  	697,5,35,0,0,697,698,5,32,0,0,698,702,1,0,0,0,699,701,8,5,0,0,700,699,
  	1,0,0,0,701,704,1,0,0,0,702,700,1,0,0,0,702,703,1,0,0,0,703,705,1,0,0,
  	0,704,702,1,0,0,0,705,706,6,69,1,0,706,140,1,0,0,0,707,708,5,47,0,0,708,
  	709,5,47,0,0,709,713,1,0,0,0,710,712,8,5,0,0,711,710,1,0,0,0,712,715,
  	1,0,0,0,713,711,1,0,0,0,713,714,1,0,0,0,714,716,1,0,0,0,715,713,1,0,0,
  	0,716,717,6,70,1,0,717,142,1,0,0,0,718,719,7,6,0,0,719,144,1,0,0,0,720,
  	722,3,149,74,0,721,720,1,0,0,0,722,723,1,0,0,0,723,721,1,0,0,0,723,724,
  	1,0,0,0,724,725,1,0,0,0,725,727,5,46,0,0,726,728,3,149,74,0,727,726,1,
  	0,0,0,728,729,1,0,0,0,729,727,1,0,0,0,729,730,1,0,0,0,730,745,1,0,0,0,
  	731,733,3,149,74,0,732,731,1,0,0,0,733,734,1,0,0,0,734,732,1,0,0,0,734,
  	735,1,0,0,0,735,736,1,0,0,0,736,737,5,46,0,0,737,745,1,0,0,0,738,740,
  	5,46,0,0,739,741,3,149,74,0,740,739,1,0,0,0,741,742,1,0,0,0,742,740,1,
  	0,0,0,742,743,1,0,0,0,743,745,1,0,0,0,744,721,1,0,0,0,744,732,1,0,0,0,
  	744,738,1,0,0,0,745,146,1,0,0,0,746,747,7,7,0,0,747,148,1,0,0,0,748,749,
  	7,8,0,0,749,150,1,0,0,0,37,0,281,295,305,321,333,347,361,375,385,401,
  	421,431,447,465,473,481,489,499,584,592,599,601,611,615,619,624,677,686,
  	688,702,713,723,729,734,742,744,2,6,0,0,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  rqllexerLexerStaticData = staticData.release();
}

}

RQLLexer::RQLLexer(CharStream *input) : Lexer(input) {
  RQLLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *rqllexerLexerStaticData->atn, rqllexerLexerStaticData->decisionToDFA, rqllexerLexerStaticData->sharedContextCache);
}

RQLLexer::~RQLLexer() {
  delete _interpreter;
}

std::string RQLLexer::getGrammarFileName() const {
  return "RQL.g4";
}

const std::vector<std::string>& RQLLexer::getRuleNames() const {
  return rqllexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& RQLLexer::getChannelNames() const {
  return rqllexerLexerStaticData->channelNames;
}

const std::vector<std::string>& RQLLexer::getModeNames() const {
  return rqllexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& RQLLexer::getVocabulary() const {
  return rqllexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView RQLLexer::getSerializedATN() const {
  return rqllexerLexerStaticData->serializedATN;
}

const atn::ATN& RQLLexer::getATN() const {
  return *rqllexerLexerStaticData->atn;
}




void RQLLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  rqllexerLexerInitialize();
#else
  ::antlr4::internal::call_once(rqllexerLexerOnceFlag, rqllexerLexerInitialize);
#endif
}
