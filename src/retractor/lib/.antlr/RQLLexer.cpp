
// Generated from RQL.g4 by ANTLR 4.13.1


#include "RQLLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct RQLLexerStaticData final {
  RQLLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  RQLLexerStaticData(const RQLLexerStaticData&) = delete;
  RQLLexerStaticData(RQLLexerStaticData&&) = delete;
  RQLLexerStaticData& operator=(const RQLLexerStaticData&) = delete;
  RQLLexerStaticData& operator=(RQLLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag rqllexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
RQLLexerStaticData *rqllexerLexerStaticData = nullptr;

void rqllexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (rqllexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(rqllexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<RQLLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "BYTE_T", "STRING_T", "UNSIGNED_T", "INTEGER_T", 
      "FLOAT_T", "DOUBLE_T", "SELECT", "STREAM", "FROM", "DECLARE", "RETENTION", 
      "FILE", "STORAGE", "SUBSTRAT", "RULE", "ON", "WHEN", "DO", "IN", "TO", 
      "MIN", "MAX", "AVG", "SUMC", "STRING_SUBSTRAT", "ID", "STRING", "FLOAT", 
      "DECIMAL", "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", "DOUBLE_BAR", 
      "DOT", "UNDERLINE", "AT", "SHARP", "AND", "MOD", "DOLLAR", "COMMA", 
      "SEMI", "COLON", "DOUBLE_COLON", "STAR", "DIVIDE", "PLUS", "MINUS", 
      "BIT_NOT", "BIT_OR", "BIT_XOR", "AND_C", "OR_C", "SPACE", "COMMENT", 
      "LINE_COMMENT1", "LINE_COMMENT2", "LETTER", "DEC_DOT_DEC", "HEX_DIGIT", 
      "DEC_DIGIT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'['", "']'", "'('", "')'", "'Sqrt'", "'Ceil'", "'Abs'", "'Floor'", 
      "'Sign'", "'Chr'", "'Length'", "'ToNumber'", "'ToTimeStamp'", "'FloatCast'", 
      "'IntCast'", "'Count'", "'Crc'", "'Sum'", "'IsZero'", "'IsNonZero'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "'='", "'>'", 
      "'<'", "'!'", "'||'", "'.'", "'_'", "'@'", "'#'", "'&'", "'%'", "'$'", 
      "','", "';'", "':'", "'::'", "'*'", "'/'", "'+'", "'-'", "'~'", "'|'", 
      "'^'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "BYTE_T", "STRING_T", "UNSIGNED_T", "INTEGER_T", "FLOAT_T", 
      "DOUBLE_T", "SELECT", "STREAM", "FROM", "DECLARE", "RETENTION", "FILE", 
      "STORAGE", "SUBSTRAT", "RULE", "ON", "WHEN", "DO", "IN", "TO", "MIN", 
      "MAX", "AVG", "SUMC", "STRING_SUBSTRAT", "ID", "STRING", "FLOAT", 
      "DECIMAL", "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", "DOUBLE_BAR", 
      "DOT", "UNDERLINE", "AT", "SHARP", "AND", "MOD", "DOLLAR", "COMMA", 
      "SEMI", "COLON", "DOUBLE_COLON", "STAR", "DIVIDE", "PLUS", "MINUS", 
      "BIT_NOT", "BIT_OR", "BIT_XOR", "AND_C", "OR_C", "SPACE", "COMMENT", 
      "LINE_COMMENT1", "LINE_COMMENT2"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,79,826,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,1,0,1,0,1,1,1,
  	1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
  	1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,
  	1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
  	1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,
  	1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
  	1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,
  	1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,298,8,20,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,312,8,21,1,22,1,22,
  	1,22,1,22,1,22,1,22,1,22,1,22,3,22,322,8,22,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,338,8,23,1,24,1,24,
  	1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,350,8,24,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,364,8,25,1,26,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,378,8,26,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,392,8,27,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,402,8,28,1,29,1,29,1,29,
  	1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,418,8,29,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,3,30,438,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
  	1,31,3,31,448,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
  	1,32,1,32,1,32,1,32,3,32,464,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,482,8,33,1,34,1,34,
  	1,34,1,34,1,34,1,34,1,34,1,34,3,34,492,8,34,1,35,1,35,1,35,1,35,3,35,
  	498,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,508,8,36,1,37,1,
  	37,1,37,1,37,3,37,514,8,37,1,38,1,38,1,38,1,38,3,38,520,8,38,1,39,1,39,
  	1,39,1,39,3,39,526,8,39,1,40,1,40,1,40,1,40,1,40,1,40,3,40,534,8,40,1,
  	41,1,41,1,41,1,41,1,41,1,41,3,41,542,8,41,1,42,1,42,1,42,1,42,1,42,1,
  	42,3,42,550,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,560,8,43,
  	1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
  	1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
  	1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
  	1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
  	1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
  	1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,
  	645,8,44,1,44,1,44,1,45,1,45,5,45,651,8,45,10,45,12,45,654,9,45,1,46,
  	1,46,1,46,1,46,5,46,660,8,46,10,46,12,46,663,9,46,1,46,1,46,1,47,1,47,
  	1,48,4,48,670,8,48,11,48,12,48,671,1,49,1,49,3,49,676,8,49,1,49,1,49,
  	3,49,680,8,49,1,49,4,49,683,8,49,11,49,12,49,684,1,50,1,50,1,51,1,51,
  	1,52,1,52,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,
  	1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,
  	1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,
  	1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,742,8,73,1,74,1,74,
  	1,74,1,74,1,74,3,74,749,8,74,1,75,4,75,752,8,75,11,75,12,75,753,1,75,
  	1,75,1,76,1,76,1,76,1,76,1,76,5,76,763,8,76,10,76,12,76,766,9,76,1,76,
  	1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,5,77,777,8,77,10,77,12,77,780,
  	9,77,1,77,1,77,1,78,1,78,1,78,1,78,5,78,788,8,78,10,78,12,78,791,9,78,
  	1,78,1,78,1,79,1,79,1,80,4,80,798,8,80,11,80,12,80,799,1,80,1,80,4,80,
  	804,8,80,11,80,12,80,805,1,80,4,80,809,8,80,11,80,12,80,810,1,80,1,80,
  	1,80,1,80,4,80,817,8,80,11,80,12,80,818,3,80,821,8,80,1,81,1,81,1,82,
  	1,82,1,764,0,83,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
  	12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
  	47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
  	35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
  	93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,
  	57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,
  	67,135,68,137,69,139,70,141,71,143,72,145,73,147,74,149,75,151,76,153,
  	77,155,78,157,79,159,0,161,0,163,0,165,0,1,0,9,2,0,65,90,97,122,5,0,36,
  	36,48,57,65,90,95,95,97,122,1,0,39,39,2,0,43,43,45,45,3,0,9,10,13,13,
  	32,32,2,0,10,10,13,13,2,0,65,90,95,95,2,0,48,57,65,70,1,0,48,57,880,0,
  	1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
  	0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
  	23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
  	0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
  	0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
  	55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
  	0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
  	0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
  	87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,
  	0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,
  	0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,
  	0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,
  	0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,
  	0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,
  	0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,
  	0,0,0,1,167,1,0,0,0,3,169,1,0,0,0,5,171,1,0,0,0,7,173,1,0,0,0,9,175,1,
  	0,0,0,11,180,1,0,0,0,13,185,1,0,0,0,15,189,1,0,0,0,17,195,1,0,0,0,19,
  	200,1,0,0,0,21,204,1,0,0,0,23,211,1,0,0,0,25,220,1,0,0,0,27,232,1,0,0,
  	0,29,242,1,0,0,0,31,250,1,0,0,0,33,256,1,0,0,0,35,260,1,0,0,0,37,264,
  	1,0,0,0,39,271,1,0,0,0,41,297,1,0,0,0,43,311,1,0,0,0,45,321,1,0,0,0,47,
  	337,1,0,0,0,49,349,1,0,0,0,51,363,1,0,0,0,53,377,1,0,0,0,55,391,1,0,0,
  	0,57,401,1,0,0,0,59,417,1,0,0,0,61,437,1,0,0,0,63,447,1,0,0,0,65,463,
  	1,0,0,0,67,481,1,0,0,0,69,491,1,0,0,0,71,497,1,0,0,0,73,507,1,0,0,0,75,
  	513,1,0,0,0,77,519,1,0,0,0,79,525,1,0,0,0,81,533,1,0,0,0,83,541,1,0,0,
  	0,85,549,1,0,0,0,87,559,1,0,0,0,89,561,1,0,0,0,91,648,1,0,0,0,93,655,
  	1,0,0,0,95,666,1,0,0,0,97,669,1,0,0,0,99,675,1,0,0,0,101,686,1,0,0,0,
  	103,688,1,0,0,0,105,690,1,0,0,0,107,692,1,0,0,0,109,694,1,0,0,0,111,697,
  	1,0,0,0,113,699,1,0,0,0,115,701,1,0,0,0,117,703,1,0,0,0,119,705,1,0,0,
  	0,121,707,1,0,0,0,123,709,1,0,0,0,125,711,1,0,0,0,127,713,1,0,0,0,129,
  	715,1,0,0,0,131,717,1,0,0,0,133,720,1,0,0,0,135,722,1,0,0,0,137,724,1,
  	0,0,0,139,726,1,0,0,0,141,728,1,0,0,0,143,730,1,0,0,0,145,732,1,0,0,0,
  	147,741,1,0,0,0,149,748,1,0,0,0,151,751,1,0,0,0,153,757,1,0,0,0,155,772,
  	1,0,0,0,157,783,1,0,0,0,159,794,1,0,0,0,161,820,1,0,0,0,163,822,1,0,0,
  	0,165,824,1,0,0,0,167,168,5,91,0,0,168,2,1,0,0,0,169,170,5,93,0,0,170,
  	4,1,0,0,0,171,172,5,40,0,0,172,6,1,0,0,0,173,174,5,41,0,0,174,8,1,0,0,
  	0,175,176,5,83,0,0,176,177,5,113,0,0,177,178,5,114,0,0,178,179,5,116,
  	0,0,179,10,1,0,0,0,180,181,5,67,0,0,181,182,5,101,0,0,182,183,5,105,0,
  	0,183,184,5,108,0,0,184,12,1,0,0,0,185,186,5,65,0,0,186,187,5,98,0,0,
  	187,188,5,115,0,0,188,14,1,0,0,0,189,190,5,70,0,0,190,191,5,108,0,0,191,
  	192,5,111,0,0,192,193,5,111,0,0,193,194,5,114,0,0,194,16,1,0,0,0,195,
  	196,5,83,0,0,196,197,5,105,0,0,197,198,5,103,0,0,198,199,5,110,0,0,199,
  	18,1,0,0,0,200,201,5,67,0,0,201,202,5,104,0,0,202,203,5,114,0,0,203,20,
  	1,0,0,0,204,205,5,76,0,0,205,206,5,101,0,0,206,207,5,110,0,0,207,208,
  	5,103,0,0,208,209,5,116,0,0,209,210,5,104,0,0,210,22,1,0,0,0,211,212,
  	5,84,0,0,212,213,5,111,0,0,213,214,5,78,0,0,214,215,5,117,0,0,215,216,
  	5,109,0,0,216,217,5,98,0,0,217,218,5,101,0,0,218,219,5,114,0,0,219,24,
  	1,0,0,0,220,221,5,84,0,0,221,222,5,111,0,0,222,223,5,84,0,0,223,224,5,
  	105,0,0,224,225,5,109,0,0,225,226,5,101,0,0,226,227,5,83,0,0,227,228,
  	5,116,0,0,228,229,5,97,0,0,229,230,5,109,0,0,230,231,5,112,0,0,231,26,
  	1,0,0,0,232,233,5,70,0,0,233,234,5,108,0,0,234,235,5,111,0,0,235,236,
  	5,97,0,0,236,237,5,116,0,0,237,238,5,67,0,0,238,239,5,97,0,0,239,240,
  	5,115,0,0,240,241,5,116,0,0,241,28,1,0,0,0,242,243,5,73,0,0,243,244,5,
  	110,0,0,244,245,5,116,0,0,245,246,5,67,0,0,246,247,5,97,0,0,247,248,5,
  	115,0,0,248,249,5,116,0,0,249,30,1,0,0,0,250,251,5,67,0,0,251,252,5,111,
  	0,0,252,253,5,117,0,0,253,254,5,110,0,0,254,255,5,116,0,0,255,32,1,0,
  	0,0,256,257,5,67,0,0,257,258,5,114,0,0,258,259,5,99,0,0,259,34,1,0,0,
  	0,260,261,5,83,0,0,261,262,5,117,0,0,262,263,5,109,0,0,263,36,1,0,0,0,
  	264,265,5,73,0,0,265,266,5,115,0,0,266,267,5,90,0,0,267,268,5,101,0,0,
  	268,269,5,114,0,0,269,270,5,111,0,0,270,38,1,0,0,0,271,272,5,73,0,0,272,
  	273,5,115,0,0,273,274,5,78,0,0,274,275,5,111,0,0,275,276,5,110,0,0,276,
  	277,5,90,0,0,277,278,5,101,0,0,278,279,5,114,0,0,279,280,5,111,0,0,280,
  	40,1,0,0,0,281,282,5,66,0,0,282,283,5,89,0,0,283,284,5,84,0,0,284,298,
  	5,69,0,0,285,286,5,66,0,0,286,287,5,121,0,0,287,288,5,116,0,0,288,298,
  	5,101,0,0,289,290,5,67,0,0,290,291,5,72,0,0,291,292,5,65,0,0,292,298,
  	5,82,0,0,293,294,5,67,0,0,294,295,5,104,0,0,295,296,5,97,0,0,296,298,
  	5,114,0,0,297,281,1,0,0,0,297,285,1,0,0,0,297,289,1,0,0,0,297,293,1,0,
  	0,0,298,42,1,0,0,0,299,300,5,83,0,0,300,301,5,84,0,0,301,302,5,82,0,0,
  	302,303,5,73,0,0,303,304,5,78,0,0,304,312,5,71,0,0,305,306,5,83,0,0,306,
  	307,5,116,0,0,307,308,5,114,0,0,308,309,5,105,0,0,309,310,5,110,0,0,310,
  	312,5,103,0,0,311,299,1,0,0,0,311,305,1,0,0,0,312,44,1,0,0,0,313,314,
  	5,85,0,0,314,315,5,73,0,0,315,316,5,78,0,0,316,322,5,84,0,0,317,318,5,
  	85,0,0,318,319,5,105,0,0,319,320,5,110,0,0,320,322,5,116,0,0,321,313,
  	1,0,0,0,321,317,1,0,0,0,322,46,1,0,0,0,323,324,5,73,0,0,324,325,5,78,
  	0,0,325,326,5,84,0,0,326,327,5,69,0,0,327,328,5,71,0,0,328,329,5,69,0,
  	0,329,338,5,82,0,0,330,331,5,73,0,0,331,332,5,110,0,0,332,333,5,116,0,
  	0,333,334,5,101,0,0,334,335,5,103,0,0,335,336,5,101,0,0,336,338,5,114,
  	0,0,337,323,1,0,0,0,337,330,1,0,0,0,338,48,1,0,0,0,339,340,5,70,0,0,340,
  	341,5,76,0,0,341,342,5,79,0,0,342,343,5,65,0,0,343,350,5,84,0,0,344,345,
  	5,70,0,0,345,346,5,108,0,0,346,347,5,111,0,0,347,348,5,97,0,0,348,350,
  	5,116,0,0,349,339,1,0,0,0,349,344,1,0,0,0,350,50,1,0,0,0,351,352,5,68,
  	0,0,352,353,5,79,0,0,353,354,5,85,0,0,354,355,5,66,0,0,355,356,5,76,0,
  	0,356,364,5,69,0,0,357,358,5,68,0,0,358,359,5,111,0,0,359,360,5,117,0,
  	0,360,361,5,98,0,0,361,362,5,108,0,0,362,364,5,101,0,0,363,351,1,0,0,
  	0,363,357,1,0,0,0,364,52,1,0,0,0,365,366,5,83,0,0,366,367,5,69,0,0,367,
  	368,5,76,0,0,368,369,5,69,0,0,369,370,5,67,0,0,370,378,5,84,0,0,371,372,
  	5,115,0,0,372,373,5,101,0,0,373,374,5,108,0,0,374,375,5,101,0,0,375,376,
  	5,99,0,0,376,378,5,116,0,0,377,365,1,0,0,0,377,371,1,0,0,0,378,54,1,0,
  	0,0,379,380,5,83,0,0,380,381,5,84,0,0,381,382,5,82,0,0,382,383,5,69,0,
  	0,383,384,5,65,0,0,384,392,5,77,0,0,385,386,5,115,0,0,386,387,5,116,0,
  	0,387,388,5,114,0,0,388,389,5,101,0,0,389,390,5,97,0,0,390,392,5,109,
  	0,0,391,379,1,0,0,0,391,385,1,0,0,0,392,56,1,0,0,0,393,394,5,70,0,0,394,
  	395,5,82,0,0,395,396,5,79,0,0,396,402,5,77,0,0,397,398,5,102,0,0,398,
  	399,5,114,0,0,399,400,5,111,0,0,400,402,5,109,0,0,401,393,1,0,0,0,401,
  	397,1,0,0,0,402,58,1,0,0,0,403,404,5,68,0,0,404,405,5,69,0,0,405,406,
  	5,67,0,0,406,407,5,76,0,0,407,408,5,65,0,0,408,409,5,82,0,0,409,418,5,
  	69,0,0,410,411,5,100,0,0,411,412,5,101,0,0,412,413,5,99,0,0,413,414,5,
  	108,0,0,414,415,5,97,0,0,415,416,5,114,0,0,416,418,5,101,0,0,417,403,
  	1,0,0,0,417,410,1,0,0,0,418,60,1,0,0,0,419,420,5,82,0,0,420,421,5,69,
  	0,0,421,422,5,84,0,0,422,423,5,69,0,0,423,424,5,78,0,0,424,425,5,84,0,
  	0,425,426,5,73,0,0,426,427,5,79,0,0,427,438,5,78,0,0,428,429,5,114,0,
  	0,429,430,5,101,0,0,430,431,5,116,0,0,431,432,5,101,0,0,432,433,5,110,
  	0,0,433,434,5,116,0,0,434,435,5,105,0,0,435,436,5,111,0,0,436,438,5,110,
  	0,0,437,419,1,0,0,0,437,428,1,0,0,0,438,62,1,0,0,0,439,440,5,70,0,0,440,
  	441,5,73,0,0,441,442,5,76,0,0,442,448,5,69,0,0,443,444,5,102,0,0,444,
  	445,5,105,0,0,445,446,5,108,0,0,446,448,5,101,0,0,447,439,1,0,0,0,447,
  	443,1,0,0,0,448,64,1,0,0,0,449,450,5,83,0,0,450,451,5,84,0,0,451,452,
  	5,79,0,0,452,453,5,82,0,0,453,454,5,65,0,0,454,455,5,71,0,0,455,464,5,
  	69,0,0,456,457,5,115,0,0,457,458,5,116,0,0,458,459,5,111,0,0,459,460,
  	5,114,0,0,460,461,5,97,0,0,461,462,5,103,0,0,462,464,5,101,0,0,463,449,
  	1,0,0,0,463,456,1,0,0,0,464,66,1,0,0,0,465,466,5,83,0,0,466,467,5,85,
  	0,0,467,468,5,66,0,0,468,469,5,83,0,0,469,470,5,84,0,0,470,471,5,82,0,
  	0,471,472,5,65,0,0,472,482,5,84,0,0,473,474,5,115,0,0,474,475,5,117,0,
  	0,475,476,5,98,0,0,476,477,5,115,0,0,477,478,5,116,0,0,478,479,5,114,
  	0,0,479,480,5,97,0,0,480,482,5,116,0,0,481,465,1,0,0,0,481,473,1,0,0,
  	0,482,68,1,0,0,0,483,484,5,82,0,0,484,485,5,85,0,0,485,486,5,76,0,0,486,
  	492,5,69,0,0,487,488,5,114,0,0,488,489,5,117,0,0,489,490,5,108,0,0,490,
  	492,5,101,0,0,491,483,1,0,0,0,491,487,1,0,0,0,492,70,1,0,0,0,493,494,
  	5,79,0,0,494,498,5,78,0,0,495,496,5,111,0,0,496,498,5,110,0,0,497,493,
  	1,0,0,0,497,495,1,0,0,0,498,72,1,0,0,0,499,500,5,87,0,0,500,501,5,72,
  	0,0,501,502,5,69,0,0,502,508,5,78,0,0,503,504,5,119,0,0,504,505,5,104,
  	0,0,505,506,5,101,0,0,506,508,5,110,0,0,507,499,1,0,0,0,507,503,1,0,0,
  	0,508,74,1,0,0,0,509,510,5,68,0,0,510,514,5,79,0,0,511,512,5,100,0,0,
  	512,514,5,111,0,0,513,509,1,0,0,0,513,511,1,0,0,0,514,76,1,0,0,0,515,
  	516,5,73,0,0,516,520,5,78,0,0,517,518,5,105,0,0,518,520,5,110,0,0,519,
  	515,1,0,0,0,519,517,1,0,0,0,520,78,1,0,0,0,521,522,5,84,0,0,522,526,5,
  	79,0,0,523,524,5,116,0,0,524,526,5,111,0,0,525,521,1,0,0,0,525,523,1,
  	0,0,0,526,80,1,0,0,0,527,528,5,77,0,0,528,529,5,73,0,0,529,534,5,78,0,
  	0,530,531,5,109,0,0,531,532,5,105,0,0,532,534,5,110,0,0,533,527,1,0,0,
  	0,533,530,1,0,0,0,534,82,1,0,0,0,535,536,5,77,0,0,536,537,5,65,0,0,537,
  	542,5,88,0,0,538,539,5,109,0,0,539,540,5,97,0,0,540,542,5,120,0,0,541,
  	535,1,0,0,0,541,538,1,0,0,0,542,84,1,0,0,0,543,544,5,65,0,0,544,545,5,
  	86,0,0,545,550,5,71,0,0,546,547,5,97,0,0,547,548,5,118,0,0,548,550,5,
  	103,0,0,549,543,1,0,0,0,549,546,1,0,0,0,550,86,1,0,0,0,551,552,5,83,0,
  	0,552,553,5,85,0,0,553,554,5,77,0,0,554,560,5,67,0,0,555,556,5,115,0,
  	0,556,557,5,117,0,0,557,558,5,109,0,0,558,560,5,99,0,0,559,551,1,0,0,
  	0,559,555,1,0,0,0,560,88,1,0,0,0,561,644,5,39,0,0,562,563,5,77,0,0,563,
  	564,5,69,0,0,564,565,5,77,0,0,565,566,5,79,0,0,566,567,5,82,0,0,567,645,
  	5,89,0,0,568,569,5,109,0,0,569,570,5,101,0,0,570,571,5,109,0,0,571,572,
  	5,111,0,0,572,573,5,114,0,0,573,645,5,121,0,0,574,575,5,68,0,0,575,576,
  	5,69,0,0,576,577,5,70,0,0,577,578,5,65,0,0,578,579,5,85,0,0,579,580,5,
  	76,0,0,580,645,5,84,0,0,581,582,5,100,0,0,582,583,5,101,0,0,583,584,5,
  	102,0,0,584,585,5,97,0,0,585,586,5,117,0,0,586,587,5,108,0,0,587,645,
  	5,116,0,0,588,589,5,80,0,0,589,590,5,79,0,0,590,591,5,83,0,0,591,592,
  	5,73,0,0,592,645,5,88,0,0,593,594,5,112,0,0,594,595,5,111,0,0,595,596,
  	5,115,0,0,596,597,5,105,0,0,597,645,5,120,0,0,598,599,5,71,0,0,599,600,
  	5,69,0,0,600,601,5,78,0,0,601,602,5,69,0,0,602,603,5,82,0,0,603,604,5,
  	73,0,0,604,645,5,67,0,0,605,606,5,103,0,0,606,607,5,101,0,0,607,608,5,
  	110,0,0,608,609,5,101,0,0,609,610,5,114,0,0,610,611,5,105,0,0,611,645,
  	5,99,0,0,612,613,5,68,0,0,613,614,5,69,0,0,614,615,5,86,0,0,615,616,5,
  	73,0,0,616,617,5,67,0,0,617,645,5,69,0,0,618,619,5,100,0,0,619,620,5,
  	101,0,0,620,621,5,118,0,0,621,622,5,105,0,0,622,623,5,99,0,0,623,645,
  	5,101,0,0,624,625,5,84,0,0,625,626,5,69,0,0,626,627,5,88,0,0,627,628,
  	5,84,0,0,628,629,5,83,0,0,629,630,5,79,0,0,630,631,5,85,0,0,631,632,5,
  	82,0,0,632,633,5,67,0,0,633,645,5,69,0,0,634,635,5,116,0,0,635,636,5,
  	101,0,0,636,637,5,120,0,0,637,638,5,116,0,0,638,639,5,115,0,0,639,640,
  	5,111,0,0,640,641,5,117,0,0,641,642,5,114,0,0,642,643,5,99,0,0,643,645,
  	5,101,0,0,644,562,1,0,0,0,644,568,1,0,0,0,644,574,1,0,0,0,644,581,1,0,
  	0,0,644,588,1,0,0,0,644,593,1,0,0,0,644,598,1,0,0,0,644,605,1,0,0,0,644,
  	612,1,0,0,0,644,618,1,0,0,0,644,624,1,0,0,0,644,634,1,0,0,0,645,646,1,
  	0,0,0,646,647,5,39,0,0,647,90,1,0,0,0,648,652,7,0,0,0,649,651,7,1,0,0,
  	650,649,1,0,0,0,651,654,1,0,0,0,652,650,1,0,0,0,652,653,1,0,0,0,653,92,
  	1,0,0,0,654,652,1,0,0,0,655,661,5,39,0,0,656,660,8,2,0,0,657,658,5,39,
  	0,0,658,660,5,39,0,0,659,656,1,0,0,0,659,657,1,0,0,0,660,663,1,0,0,0,
  	661,659,1,0,0,0,661,662,1,0,0,0,662,664,1,0,0,0,663,661,1,0,0,0,664,665,
  	5,39,0,0,665,94,1,0,0,0,666,667,3,161,80,0,667,96,1,0,0,0,668,670,3,165,
  	82,0,669,668,1,0,0,0,670,671,1,0,0,0,671,669,1,0,0,0,671,672,1,0,0,0,
  	672,98,1,0,0,0,673,676,3,97,48,0,674,676,3,161,80,0,675,673,1,0,0,0,675,
  	674,1,0,0,0,676,677,1,0,0,0,677,679,5,69,0,0,678,680,7,3,0,0,679,678,
  	1,0,0,0,679,680,1,0,0,0,680,682,1,0,0,0,681,683,3,165,82,0,682,681,1,
  	0,0,0,683,684,1,0,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,100,1,0,0,0,
  	686,687,5,61,0,0,687,102,1,0,0,0,688,689,5,62,0,0,689,104,1,0,0,0,690,
  	691,5,60,0,0,691,106,1,0,0,0,692,693,5,33,0,0,693,108,1,0,0,0,694,695,
  	5,124,0,0,695,696,5,124,0,0,696,110,1,0,0,0,697,698,5,46,0,0,698,112,
  	1,0,0,0,699,700,5,95,0,0,700,114,1,0,0,0,701,702,5,64,0,0,702,116,1,0,
  	0,0,703,704,5,35,0,0,704,118,1,0,0,0,705,706,5,38,0,0,706,120,1,0,0,0,
  	707,708,5,37,0,0,708,122,1,0,0,0,709,710,5,36,0,0,710,124,1,0,0,0,711,
  	712,5,44,0,0,712,126,1,0,0,0,713,714,5,59,0,0,714,128,1,0,0,0,715,716,
  	5,58,0,0,716,130,1,0,0,0,717,718,5,58,0,0,718,719,5,58,0,0,719,132,1,
  	0,0,0,720,721,5,42,0,0,721,134,1,0,0,0,722,723,5,47,0,0,723,136,1,0,0,
  	0,724,725,5,43,0,0,725,138,1,0,0,0,726,727,5,45,0,0,727,140,1,0,0,0,728,
  	729,5,126,0,0,729,142,1,0,0,0,730,731,5,124,0,0,731,144,1,0,0,0,732,733,
  	5,94,0,0,733,146,1,0,0,0,734,735,5,65,0,0,735,736,5,78,0,0,736,742,5,
  	68,0,0,737,738,5,97,0,0,738,739,5,110,0,0,739,742,5,100,0,0,740,742,3,
  	119,59,0,741,734,1,0,0,0,741,737,1,0,0,0,741,740,1,0,0,0,742,148,1,0,
  	0,0,743,744,5,79,0,0,744,749,5,82,0,0,745,746,5,111,0,0,746,749,5,114,
  	0,0,747,749,3,143,71,0,748,743,1,0,0,0,748,745,1,0,0,0,748,747,1,0,0,
  	0,749,150,1,0,0,0,750,752,7,4,0,0,751,750,1,0,0,0,752,753,1,0,0,0,753,
  	751,1,0,0,0,753,754,1,0,0,0,754,755,1,0,0,0,755,756,6,75,0,0,756,152,
  	1,0,0,0,757,758,5,47,0,0,758,759,5,42,0,0,759,764,1,0,0,0,760,763,3,153,
  	76,0,761,763,9,0,0,0,762,760,1,0,0,0,762,761,1,0,0,0,763,766,1,0,0,0,
  	764,765,1,0,0,0,764,762,1,0,0,0,765,767,1,0,0,0,766,764,1,0,0,0,767,768,
  	5,42,0,0,768,769,5,47,0,0,769,770,1,0,0,0,770,771,6,76,1,0,771,154,1,
  	0,0,0,772,773,5,35,0,0,773,774,5,32,0,0,774,778,1,0,0,0,775,777,8,5,0,
  	0,776,775,1,0,0,0,777,780,1,0,0,0,778,776,1,0,0,0,778,779,1,0,0,0,779,
  	781,1,0,0,0,780,778,1,0,0,0,781,782,6,77,1,0,782,156,1,0,0,0,783,784,
  	5,47,0,0,784,785,5,47,0,0,785,789,1,0,0,0,786,788,8,5,0,0,787,786,1,0,
  	0,0,788,791,1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,791,
  	789,1,0,0,0,792,793,6,78,1,0,793,158,1,0,0,0,794,795,7,6,0,0,795,160,
  	1,0,0,0,796,798,3,165,82,0,797,796,1,0,0,0,798,799,1,0,0,0,799,797,1,
  	0,0,0,799,800,1,0,0,0,800,801,1,0,0,0,801,803,5,46,0,0,802,804,3,165,
  	82,0,803,802,1,0,0,0,804,805,1,0,0,0,805,803,1,0,0,0,805,806,1,0,0,0,
  	806,821,1,0,0,0,807,809,3,165,82,0,808,807,1,0,0,0,809,810,1,0,0,0,810,
  	808,1,0,0,0,810,811,1,0,0,0,811,812,1,0,0,0,812,813,5,46,0,0,813,821,
  	1,0,0,0,814,816,5,46,0,0,815,817,3,165,82,0,816,815,1,0,0,0,817,818,1,
  	0,0,0,818,816,1,0,0,0,818,819,1,0,0,0,819,821,1,0,0,0,820,797,1,0,0,0,
  	820,808,1,0,0,0,820,814,1,0,0,0,821,162,1,0,0,0,822,823,7,7,0,0,823,164,
  	1,0,0,0,824,825,7,8,0,0,825,166,1,0,0,0,45,0,297,311,321,337,349,363,
  	377,391,401,417,437,447,463,481,491,497,507,513,519,525,533,541,549,559,
  	644,652,659,661,671,675,679,684,741,748,753,762,764,778,789,799,805,810,
  	818,820,2,6,0,0,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  rqllexerLexerStaticData = staticData.release();
}

}

RQLLexer::RQLLexer(CharStream *input) : Lexer(input) {
  RQLLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *rqllexerLexerStaticData->atn, rqllexerLexerStaticData->decisionToDFA, rqllexerLexerStaticData->sharedContextCache);
}

RQLLexer::~RQLLexer() {
  delete _interpreter;
}

std::string RQLLexer::getGrammarFileName() const {
  return "RQL.g4";
}

const std::vector<std::string>& RQLLexer::getRuleNames() const {
  return rqllexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& RQLLexer::getChannelNames() const {
  return rqllexerLexerStaticData->channelNames;
}

const std::vector<std::string>& RQLLexer::getModeNames() const {
  return rqllexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& RQLLexer::getVocabulary() const {
  return rqllexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView RQLLexer::getSerializedATN() const {
  return rqllexerLexerStaticData->serializedATN;
}

const atn::ATN& RQLLexer::getATN() const {
  return *rqllexerLexerStaticData->atn;
}




void RQLLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  rqllexerLexerInitialize();
#else
  ::antlr4::internal::call_once(rqllexerLexerOnceFlag, rqllexerLexerInitialize);
#endif
}
