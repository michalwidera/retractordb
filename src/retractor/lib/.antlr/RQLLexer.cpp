
// Generated from RQL.g4 by ANTLR 4.13.1


#include "RQLLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct RQLLexerStaticData final {
  RQLLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  RQLLexerStaticData(const RQLLexerStaticData&) = delete;
  RQLLexerStaticData(RQLLexerStaticData&&) = delete;
  RQLLexerStaticData& operator=(const RQLLexerStaticData&) = delete;
  RQLLexerStaticData& operator=(RQLLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag rqllexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
RQLLexerStaticData *rqllexerLexerStaticData = nullptr;

void rqllexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (rqllexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(rqllexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<RQLLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "BYTE_T", "STRING_T", "UNSIGNED_T", "INTEGER_T", 
      "FLOAT_T", "DOUBLE_T", "SELECT", "STREAM", "FROM", "DECLARE", "RETENTION", 
      "FILE", "STORAGE", "SUBSTRAT", "RULE", "ON", "WHEN", "DUMP", "SYSTEM", 
      "DO", "TO", "MIN", "MAX", "AVG", "SUMC", "STRING_SUBSTRAT", "ID", 
      "STRING", "FLOAT", "DECIMAL", "REAL", "IS_EQUAL", "EQUAL", "GREATER", 
      "LESS", "EXCLAMATION", "DOUBLE_BAR", "DOT", "UNDERLINE", "AT", "SHARP", 
      "AND", "MOD", "DOLLAR", "COMMA", "SEMI", "COLON", "DOUBLE_COLON", 
      "STAR", "DIVIDE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_XOR", 
      "AND_C", "OR_C", "SPACE", "COMMENT", "LINE_COMMENT1", "LINE_COMMENT2", 
      "LETTER", "DEC_DOT_DEC", "HEX_DIGIT", "DEC_DIGIT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'['", "']'", "'('", "')'", "'Sqrt'", "'Ceil'", "'Abs'", "'Floor'", 
      "'Sign'", "'Chr'", "'Length'", "'ToNumber'", "'ToTimeStamp'", "'FloatCast'", 
      "'IntCast'", "'Count'", "'Crc'", "'Sum'", "'IsZero'", "'IsNonZero'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'=='", "'='", 
      "'>'", "'<'", "'!'", "'||'", "'.'", "'_'", "'@'", "'#'", "'&'", "'%'", 
      "'$'", "','", "';'", "':'", "'::'", "'*'", "'/'", "'+'", "'-'", "'~'", 
      "'|'", "'^'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "BYTE_T", "STRING_T", "UNSIGNED_T", "INTEGER_T", "FLOAT_T", 
      "DOUBLE_T", "SELECT", "STREAM", "FROM", "DECLARE", "RETENTION", "FILE", 
      "STORAGE", "SUBSTRAT", "RULE", "ON", "WHEN", "DUMP", "SYSTEM", "DO", 
      "TO", "MIN", "MAX", "AVG", "SUMC", "STRING_SUBSTRAT", "ID", "STRING", 
      "FLOAT", "DECIMAL", "REAL", "IS_EQUAL", "EQUAL", "GREATER", "LESS", 
      "EXCLAMATION", "DOUBLE_BAR", "DOT", "UNDERLINE", "AT", "SHARP", "AND", 
      "MOD", "DOLLAR", "COMMA", "SEMI", "COLON", "DOUBLE_COLON", "STAR", 
      "DIVIDE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_XOR", "AND_C", 
      "OR_C", "SPACE", "COMMENT", "LINE_COMMENT1", "LINE_COMMENT2"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,81,849,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
  	1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
  	9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
  	1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
  	1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,
  	1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,302,
  	8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,
  	316,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,326,8,22,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,342,
  	8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,354,8,24,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,368,
  	8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,
  	382,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	3,27,396,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,406,8,28,1,
  	29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,
  	29,422,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
  	30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,442,8,30,1,31,1,31,1,31,1,31,1,
  	31,1,31,1,31,1,31,3,31,452,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
  	32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,468,8,32,1,33,1,33,1,33,1,33,1,
  	33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,486,8,
  	33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,496,8,34,1,35,1,35,1,
  	35,1,35,3,35,502,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,512,
  	8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,522,8,37,1,38,1,38,
  	1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,536,8,38,1,39,
  	1,39,1,39,1,39,3,39,542,8,39,1,40,1,40,1,40,1,40,3,40,548,8,40,1,41,1,
  	41,1,41,1,41,1,41,1,41,3,41,556,8,41,1,42,1,42,1,42,1,42,1,42,1,42,3,
  	42,564,8,42,1,43,1,43,1,43,1,43,1,43,1,43,3,43,572,8,43,1,44,1,44,1,44,
  	1,44,1,44,1,44,1,44,1,44,3,44,582,8,44,1,45,1,45,1,45,1,45,1,45,1,45,
  	1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
  	1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
  	1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
  	1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
  	1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
  	1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,667,8,45,1,45,1,45,1,46,1,46,
  	5,46,673,8,46,10,46,12,46,676,9,46,1,47,1,47,1,47,1,47,5,47,682,8,47,
  	10,47,12,47,685,9,47,1,47,1,47,1,48,1,48,1,49,4,49,692,8,49,11,49,12,
  	49,693,1,50,1,50,3,50,698,8,50,1,50,1,50,3,50,702,8,50,1,50,4,50,705,
  	8,50,11,50,12,50,706,1,51,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,
  	1,55,1,56,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,
  	1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,67,1,68,
  	1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,
  	1,75,1,75,1,75,1,75,1,75,3,75,766,8,75,1,76,1,76,1,76,1,76,3,76,772,8,
  	76,1,77,4,77,775,8,77,11,77,12,77,776,1,77,1,77,1,78,1,78,1,78,1,78,1,
  	78,5,78,786,8,78,10,78,12,78,789,9,78,1,78,1,78,1,78,1,78,1,78,1,79,1,
  	79,1,79,1,79,5,79,800,8,79,10,79,12,79,803,9,79,1,79,1,79,1,80,1,80,1,
  	80,1,80,5,80,811,8,80,10,80,12,80,814,9,80,1,80,1,80,1,81,1,81,1,82,4,
  	82,821,8,82,11,82,12,82,822,1,82,1,82,4,82,827,8,82,11,82,12,82,828,1,
  	82,4,82,832,8,82,11,82,12,82,833,1,82,1,82,1,82,1,82,4,82,840,8,82,11,
  	82,12,82,841,3,82,844,8,82,1,83,1,83,1,84,1,84,1,787,0,85,1,1,3,2,5,3,
  	7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
  	33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
  	28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
  	79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
  	51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,
  	61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,
  	71,143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,
  	81,163,0,165,0,167,0,169,0,1,0,9,2,0,65,90,97,122,5,0,36,36,48,57,65,
  	90,95,95,97,122,1,0,39,39,2,0,43,43,45,45,3,0,9,10,13,13,32,32,2,0,10,
  	10,13,13,2,0,65,90,95,95,2,0,48,57,65,70,1,0,48,57,902,0,1,1,0,0,0,0,
  	3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
  	0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
  	25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
  	0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
  	0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
  	57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,
  	0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
  	0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,
  	89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,
  	0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,
  	0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,
  	0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,
  	0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,
  	0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,
  	0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,
  	0,0,0,0,161,1,0,0,0,1,171,1,0,0,0,3,173,1,0,0,0,5,175,1,0,0,0,7,177,1,
  	0,0,0,9,179,1,0,0,0,11,184,1,0,0,0,13,189,1,0,0,0,15,193,1,0,0,0,17,199,
  	1,0,0,0,19,204,1,0,0,0,21,208,1,0,0,0,23,215,1,0,0,0,25,224,1,0,0,0,27,
  	236,1,0,0,0,29,246,1,0,0,0,31,254,1,0,0,0,33,260,1,0,0,0,35,264,1,0,0,
  	0,37,268,1,0,0,0,39,275,1,0,0,0,41,301,1,0,0,0,43,315,1,0,0,0,45,325,
  	1,0,0,0,47,341,1,0,0,0,49,353,1,0,0,0,51,367,1,0,0,0,53,381,1,0,0,0,55,
  	395,1,0,0,0,57,405,1,0,0,0,59,421,1,0,0,0,61,441,1,0,0,0,63,451,1,0,0,
  	0,65,467,1,0,0,0,67,485,1,0,0,0,69,495,1,0,0,0,71,501,1,0,0,0,73,511,
  	1,0,0,0,75,521,1,0,0,0,77,535,1,0,0,0,79,541,1,0,0,0,81,547,1,0,0,0,83,
  	555,1,0,0,0,85,563,1,0,0,0,87,571,1,0,0,0,89,581,1,0,0,0,91,583,1,0,0,
  	0,93,670,1,0,0,0,95,677,1,0,0,0,97,688,1,0,0,0,99,691,1,0,0,0,101,697,
  	1,0,0,0,103,708,1,0,0,0,105,711,1,0,0,0,107,713,1,0,0,0,109,715,1,0,0,
  	0,111,717,1,0,0,0,113,719,1,0,0,0,115,722,1,0,0,0,117,724,1,0,0,0,119,
  	726,1,0,0,0,121,728,1,0,0,0,123,730,1,0,0,0,125,732,1,0,0,0,127,734,1,
  	0,0,0,129,736,1,0,0,0,131,738,1,0,0,0,133,740,1,0,0,0,135,742,1,0,0,0,
  	137,745,1,0,0,0,139,747,1,0,0,0,141,749,1,0,0,0,143,751,1,0,0,0,145,753,
  	1,0,0,0,147,755,1,0,0,0,149,757,1,0,0,0,151,765,1,0,0,0,153,771,1,0,0,
  	0,155,774,1,0,0,0,157,780,1,0,0,0,159,795,1,0,0,0,161,806,1,0,0,0,163,
  	817,1,0,0,0,165,843,1,0,0,0,167,845,1,0,0,0,169,847,1,0,0,0,171,172,5,
  	91,0,0,172,2,1,0,0,0,173,174,5,93,0,0,174,4,1,0,0,0,175,176,5,40,0,0,
  	176,6,1,0,0,0,177,178,5,41,0,0,178,8,1,0,0,0,179,180,5,83,0,0,180,181,
  	5,113,0,0,181,182,5,114,0,0,182,183,5,116,0,0,183,10,1,0,0,0,184,185,
  	5,67,0,0,185,186,5,101,0,0,186,187,5,105,0,0,187,188,5,108,0,0,188,12,
  	1,0,0,0,189,190,5,65,0,0,190,191,5,98,0,0,191,192,5,115,0,0,192,14,1,
  	0,0,0,193,194,5,70,0,0,194,195,5,108,0,0,195,196,5,111,0,0,196,197,5,
  	111,0,0,197,198,5,114,0,0,198,16,1,0,0,0,199,200,5,83,0,0,200,201,5,105,
  	0,0,201,202,5,103,0,0,202,203,5,110,0,0,203,18,1,0,0,0,204,205,5,67,0,
  	0,205,206,5,104,0,0,206,207,5,114,0,0,207,20,1,0,0,0,208,209,5,76,0,0,
  	209,210,5,101,0,0,210,211,5,110,0,0,211,212,5,103,0,0,212,213,5,116,0,
  	0,213,214,5,104,0,0,214,22,1,0,0,0,215,216,5,84,0,0,216,217,5,111,0,0,
  	217,218,5,78,0,0,218,219,5,117,0,0,219,220,5,109,0,0,220,221,5,98,0,0,
  	221,222,5,101,0,0,222,223,5,114,0,0,223,24,1,0,0,0,224,225,5,84,0,0,225,
  	226,5,111,0,0,226,227,5,84,0,0,227,228,5,105,0,0,228,229,5,109,0,0,229,
  	230,5,101,0,0,230,231,5,83,0,0,231,232,5,116,0,0,232,233,5,97,0,0,233,
  	234,5,109,0,0,234,235,5,112,0,0,235,26,1,0,0,0,236,237,5,70,0,0,237,238,
  	5,108,0,0,238,239,5,111,0,0,239,240,5,97,0,0,240,241,5,116,0,0,241,242,
  	5,67,0,0,242,243,5,97,0,0,243,244,5,115,0,0,244,245,5,116,0,0,245,28,
  	1,0,0,0,246,247,5,73,0,0,247,248,5,110,0,0,248,249,5,116,0,0,249,250,
  	5,67,0,0,250,251,5,97,0,0,251,252,5,115,0,0,252,253,5,116,0,0,253,30,
  	1,0,0,0,254,255,5,67,0,0,255,256,5,111,0,0,256,257,5,117,0,0,257,258,
  	5,110,0,0,258,259,5,116,0,0,259,32,1,0,0,0,260,261,5,67,0,0,261,262,5,
  	114,0,0,262,263,5,99,0,0,263,34,1,0,0,0,264,265,5,83,0,0,265,266,5,117,
  	0,0,266,267,5,109,0,0,267,36,1,0,0,0,268,269,5,73,0,0,269,270,5,115,0,
  	0,270,271,5,90,0,0,271,272,5,101,0,0,272,273,5,114,0,0,273,274,5,111,
  	0,0,274,38,1,0,0,0,275,276,5,73,0,0,276,277,5,115,0,0,277,278,5,78,0,
  	0,278,279,5,111,0,0,279,280,5,110,0,0,280,281,5,90,0,0,281,282,5,101,
  	0,0,282,283,5,114,0,0,283,284,5,111,0,0,284,40,1,0,0,0,285,286,5,66,0,
  	0,286,287,5,89,0,0,287,288,5,84,0,0,288,302,5,69,0,0,289,290,5,66,0,0,
  	290,291,5,121,0,0,291,292,5,116,0,0,292,302,5,101,0,0,293,294,5,67,0,
  	0,294,295,5,72,0,0,295,296,5,65,0,0,296,302,5,82,0,0,297,298,5,67,0,0,
  	298,299,5,104,0,0,299,300,5,97,0,0,300,302,5,114,0,0,301,285,1,0,0,0,
  	301,289,1,0,0,0,301,293,1,0,0,0,301,297,1,0,0,0,302,42,1,0,0,0,303,304,
  	5,83,0,0,304,305,5,84,0,0,305,306,5,82,0,0,306,307,5,73,0,0,307,308,5,
  	78,0,0,308,316,5,71,0,0,309,310,5,83,0,0,310,311,5,116,0,0,311,312,5,
  	114,0,0,312,313,5,105,0,0,313,314,5,110,0,0,314,316,5,103,0,0,315,303,
  	1,0,0,0,315,309,1,0,0,0,316,44,1,0,0,0,317,318,5,85,0,0,318,319,5,73,
  	0,0,319,320,5,78,0,0,320,326,5,84,0,0,321,322,5,85,0,0,322,323,5,105,
  	0,0,323,324,5,110,0,0,324,326,5,116,0,0,325,317,1,0,0,0,325,321,1,0,0,
  	0,326,46,1,0,0,0,327,328,5,73,0,0,328,329,5,78,0,0,329,330,5,84,0,0,330,
  	331,5,69,0,0,331,332,5,71,0,0,332,333,5,69,0,0,333,342,5,82,0,0,334,335,
  	5,73,0,0,335,336,5,110,0,0,336,337,5,116,0,0,337,338,5,101,0,0,338,339,
  	5,103,0,0,339,340,5,101,0,0,340,342,5,114,0,0,341,327,1,0,0,0,341,334,
  	1,0,0,0,342,48,1,0,0,0,343,344,5,70,0,0,344,345,5,76,0,0,345,346,5,79,
  	0,0,346,347,5,65,0,0,347,354,5,84,0,0,348,349,5,70,0,0,349,350,5,108,
  	0,0,350,351,5,111,0,0,351,352,5,97,0,0,352,354,5,116,0,0,353,343,1,0,
  	0,0,353,348,1,0,0,0,354,50,1,0,0,0,355,356,5,68,0,0,356,357,5,79,0,0,
  	357,358,5,85,0,0,358,359,5,66,0,0,359,360,5,76,0,0,360,368,5,69,0,0,361,
  	362,5,68,0,0,362,363,5,111,0,0,363,364,5,117,0,0,364,365,5,98,0,0,365,
  	366,5,108,0,0,366,368,5,101,0,0,367,355,1,0,0,0,367,361,1,0,0,0,368,52,
  	1,0,0,0,369,370,5,83,0,0,370,371,5,69,0,0,371,372,5,76,0,0,372,373,5,
  	69,0,0,373,374,5,67,0,0,374,382,5,84,0,0,375,376,5,115,0,0,376,377,5,
  	101,0,0,377,378,5,108,0,0,378,379,5,101,0,0,379,380,5,99,0,0,380,382,
  	5,116,0,0,381,369,1,0,0,0,381,375,1,0,0,0,382,54,1,0,0,0,383,384,5,83,
  	0,0,384,385,5,84,0,0,385,386,5,82,0,0,386,387,5,69,0,0,387,388,5,65,0,
  	0,388,396,5,77,0,0,389,390,5,115,0,0,390,391,5,116,0,0,391,392,5,114,
  	0,0,392,393,5,101,0,0,393,394,5,97,0,0,394,396,5,109,0,0,395,383,1,0,
  	0,0,395,389,1,0,0,0,396,56,1,0,0,0,397,398,5,70,0,0,398,399,5,82,0,0,
  	399,400,5,79,0,0,400,406,5,77,0,0,401,402,5,102,0,0,402,403,5,114,0,0,
  	403,404,5,111,0,0,404,406,5,109,0,0,405,397,1,0,0,0,405,401,1,0,0,0,406,
  	58,1,0,0,0,407,408,5,68,0,0,408,409,5,69,0,0,409,410,5,67,0,0,410,411,
  	5,76,0,0,411,412,5,65,0,0,412,413,5,82,0,0,413,422,5,69,0,0,414,415,5,
  	100,0,0,415,416,5,101,0,0,416,417,5,99,0,0,417,418,5,108,0,0,418,419,
  	5,97,0,0,419,420,5,114,0,0,420,422,5,101,0,0,421,407,1,0,0,0,421,414,
  	1,0,0,0,422,60,1,0,0,0,423,424,5,82,0,0,424,425,5,69,0,0,425,426,5,84,
  	0,0,426,427,5,69,0,0,427,428,5,78,0,0,428,429,5,84,0,0,429,430,5,73,0,
  	0,430,431,5,79,0,0,431,442,5,78,0,0,432,433,5,114,0,0,433,434,5,101,0,
  	0,434,435,5,116,0,0,435,436,5,101,0,0,436,437,5,110,0,0,437,438,5,116,
  	0,0,438,439,5,105,0,0,439,440,5,111,0,0,440,442,5,110,0,0,441,423,1,0,
  	0,0,441,432,1,0,0,0,442,62,1,0,0,0,443,444,5,70,0,0,444,445,5,73,0,0,
  	445,446,5,76,0,0,446,452,5,69,0,0,447,448,5,102,0,0,448,449,5,105,0,0,
  	449,450,5,108,0,0,450,452,5,101,0,0,451,443,1,0,0,0,451,447,1,0,0,0,452,
  	64,1,0,0,0,453,454,5,83,0,0,454,455,5,84,0,0,455,456,5,79,0,0,456,457,
  	5,82,0,0,457,458,5,65,0,0,458,459,5,71,0,0,459,468,5,69,0,0,460,461,5,
  	115,0,0,461,462,5,116,0,0,462,463,5,111,0,0,463,464,5,114,0,0,464,465,
  	5,97,0,0,465,466,5,103,0,0,466,468,5,101,0,0,467,453,1,0,0,0,467,460,
  	1,0,0,0,468,66,1,0,0,0,469,470,5,83,0,0,470,471,5,85,0,0,471,472,5,66,
  	0,0,472,473,5,83,0,0,473,474,5,84,0,0,474,475,5,82,0,0,475,476,5,65,0,
  	0,476,486,5,84,0,0,477,478,5,115,0,0,478,479,5,117,0,0,479,480,5,98,0,
  	0,480,481,5,115,0,0,481,482,5,116,0,0,482,483,5,114,0,0,483,484,5,97,
  	0,0,484,486,5,116,0,0,485,469,1,0,0,0,485,477,1,0,0,0,486,68,1,0,0,0,
  	487,488,5,82,0,0,488,489,5,85,0,0,489,490,5,76,0,0,490,496,5,69,0,0,491,
  	492,5,114,0,0,492,493,5,117,0,0,493,494,5,108,0,0,494,496,5,101,0,0,495,
  	487,1,0,0,0,495,491,1,0,0,0,496,70,1,0,0,0,497,498,5,79,0,0,498,502,5,
  	78,0,0,499,500,5,111,0,0,500,502,5,110,0,0,501,497,1,0,0,0,501,499,1,
  	0,0,0,502,72,1,0,0,0,503,504,5,87,0,0,504,505,5,72,0,0,505,506,5,69,0,
  	0,506,512,5,78,0,0,507,508,5,119,0,0,508,509,5,104,0,0,509,510,5,101,
  	0,0,510,512,5,110,0,0,511,503,1,0,0,0,511,507,1,0,0,0,512,74,1,0,0,0,
  	513,514,5,68,0,0,514,515,5,85,0,0,515,516,5,77,0,0,516,522,5,80,0,0,517,
  	518,5,100,0,0,518,519,5,117,0,0,519,520,5,109,0,0,520,522,5,112,0,0,521,
  	513,1,0,0,0,521,517,1,0,0,0,522,76,1,0,0,0,523,524,5,83,0,0,524,525,5,
  	89,0,0,525,526,5,83,0,0,526,527,5,84,0,0,527,528,5,69,0,0,528,536,5,77,
  	0,0,529,530,5,115,0,0,530,531,5,121,0,0,531,532,5,115,0,0,532,533,5,116,
  	0,0,533,534,5,101,0,0,534,536,5,109,0,0,535,523,1,0,0,0,535,529,1,0,0,
  	0,536,78,1,0,0,0,537,538,5,68,0,0,538,542,5,79,0,0,539,540,5,100,0,0,
  	540,542,5,111,0,0,541,537,1,0,0,0,541,539,1,0,0,0,542,80,1,0,0,0,543,
  	544,5,84,0,0,544,548,5,79,0,0,545,546,5,116,0,0,546,548,5,111,0,0,547,
  	543,1,0,0,0,547,545,1,0,0,0,548,82,1,0,0,0,549,550,5,77,0,0,550,551,5,
  	73,0,0,551,556,5,78,0,0,552,553,5,109,0,0,553,554,5,105,0,0,554,556,5,
  	110,0,0,555,549,1,0,0,0,555,552,1,0,0,0,556,84,1,0,0,0,557,558,5,77,0,
  	0,558,559,5,65,0,0,559,564,5,88,0,0,560,561,5,109,0,0,561,562,5,97,0,
  	0,562,564,5,120,0,0,563,557,1,0,0,0,563,560,1,0,0,0,564,86,1,0,0,0,565,
  	566,5,65,0,0,566,567,5,86,0,0,567,572,5,71,0,0,568,569,5,97,0,0,569,570,
  	5,118,0,0,570,572,5,103,0,0,571,565,1,0,0,0,571,568,1,0,0,0,572,88,1,
  	0,0,0,573,574,5,83,0,0,574,575,5,85,0,0,575,576,5,77,0,0,576,582,5,67,
  	0,0,577,578,5,115,0,0,578,579,5,117,0,0,579,580,5,109,0,0,580,582,5,99,
  	0,0,581,573,1,0,0,0,581,577,1,0,0,0,582,90,1,0,0,0,583,666,5,39,0,0,584,
  	585,5,77,0,0,585,586,5,69,0,0,586,587,5,77,0,0,587,588,5,79,0,0,588,589,
  	5,82,0,0,589,667,5,89,0,0,590,591,5,109,0,0,591,592,5,101,0,0,592,593,
  	5,109,0,0,593,594,5,111,0,0,594,595,5,114,0,0,595,667,5,121,0,0,596,597,
  	5,68,0,0,597,598,5,69,0,0,598,599,5,70,0,0,599,600,5,65,0,0,600,601,5,
  	85,0,0,601,602,5,76,0,0,602,667,5,84,0,0,603,604,5,100,0,0,604,605,5,
  	101,0,0,605,606,5,102,0,0,606,607,5,97,0,0,607,608,5,117,0,0,608,609,
  	5,108,0,0,609,667,5,116,0,0,610,611,5,80,0,0,611,612,5,79,0,0,612,613,
  	5,83,0,0,613,614,5,73,0,0,614,667,5,88,0,0,615,616,5,112,0,0,616,617,
  	5,111,0,0,617,618,5,115,0,0,618,619,5,105,0,0,619,667,5,120,0,0,620,621,
  	5,71,0,0,621,622,5,69,0,0,622,623,5,78,0,0,623,624,5,69,0,0,624,625,5,
  	82,0,0,625,626,5,73,0,0,626,667,5,67,0,0,627,628,5,103,0,0,628,629,5,
  	101,0,0,629,630,5,110,0,0,630,631,5,101,0,0,631,632,5,114,0,0,632,633,
  	5,105,0,0,633,667,5,99,0,0,634,635,5,68,0,0,635,636,5,69,0,0,636,637,
  	5,86,0,0,637,638,5,73,0,0,638,639,5,67,0,0,639,667,5,69,0,0,640,641,5,
  	100,0,0,641,642,5,101,0,0,642,643,5,118,0,0,643,644,5,105,0,0,644,645,
  	5,99,0,0,645,667,5,101,0,0,646,647,5,84,0,0,647,648,5,69,0,0,648,649,
  	5,88,0,0,649,650,5,84,0,0,650,651,5,83,0,0,651,652,5,79,0,0,652,653,5,
  	85,0,0,653,654,5,82,0,0,654,655,5,67,0,0,655,667,5,69,0,0,656,657,5,116,
  	0,0,657,658,5,101,0,0,658,659,5,120,0,0,659,660,5,116,0,0,660,661,5,115,
  	0,0,661,662,5,111,0,0,662,663,5,117,0,0,663,664,5,114,0,0,664,665,5,99,
  	0,0,665,667,5,101,0,0,666,584,1,0,0,0,666,590,1,0,0,0,666,596,1,0,0,0,
  	666,603,1,0,0,0,666,610,1,0,0,0,666,615,1,0,0,0,666,620,1,0,0,0,666,627,
  	1,0,0,0,666,634,1,0,0,0,666,640,1,0,0,0,666,646,1,0,0,0,666,656,1,0,0,
  	0,667,668,1,0,0,0,668,669,5,39,0,0,669,92,1,0,0,0,670,674,7,0,0,0,671,
  	673,7,1,0,0,672,671,1,0,0,0,673,676,1,0,0,0,674,672,1,0,0,0,674,675,1,
  	0,0,0,675,94,1,0,0,0,676,674,1,0,0,0,677,683,5,39,0,0,678,682,8,2,0,0,
  	679,680,5,39,0,0,680,682,5,39,0,0,681,678,1,0,0,0,681,679,1,0,0,0,682,
  	685,1,0,0,0,683,681,1,0,0,0,683,684,1,0,0,0,684,686,1,0,0,0,685,683,1,
  	0,0,0,686,687,5,39,0,0,687,96,1,0,0,0,688,689,3,165,82,0,689,98,1,0,0,
  	0,690,692,3,169,84,0,691,690,1,0,0,0,692,693,1,0,0,0,693,691,1,0,0,0,
  	693,694,1,0,0,0,694,100,1,0,0,0,695,698,3,99,49,0,696,698,3,165,82,0,
  	697,695,1,0,0,0,697,696,1,0,0,0,698,699,1,0,0,0,699,701,5,69,0,0,700,
  	702,7,3,0,0,701,700,1,0,0,0,701,702,1,0,0,0,702,704,1,0,0,0,703,705,3,
  	169,84,0,704,703,1,0,0,0,705,706,1,0,0,0,706,704,1,0,0,0,706,707,1,0,
  	0,0,707,102,1,0,0,0,708,709,5,61,0,0,709,710,5,61,0,0,710,104,1,0,0,0,
  	711,712,5,61,0,0,712,106,1,0,0,0,713,714,5,62,0,0,714,108,1,0,0,0,715,
  	716,5,60,0,0,716,110,1,0,0,0,717,718,5,33,0,0,718,112,1,0,0,0,719,720,
  	5,124,0,0,720,721,5,124,0,0,721,114,1,0,0,0,722,723,5,46,0,0,723,116,
  	1,0,0,0,724,725,5,95,0,0,725,118,1,0,0,0,726,727,5,64,0,0,727,120,1,0,
  	0,0,728,729,5,35,0,0,729,122,1,0,0,0,730,731,5,38,0,0,731,124,1,0,0,0,
  	732,733,5,37,0,0,733,126,1,0,0,0,734,735,5,36,0,0,735,128,1,0,0,0,736,
  	737,5,44,0,0,737,130,1,0,0,0,738,739,5,59,0,0,739,132,1,0,0,0,740,741,
  	5,58,0,0,741,134,1,0,0,0,742,743,5,58,0,0,743,744,5,58,0,0,744,136,1,
  	0,0,0,745,746,5,42,0,0,746,138,1,0,0,0,747,748,5,47,0,0,748,140,1,0,0,
  	0,749,750,5,43,0,0,750,142,1,0,0,0,751,752,5,45,0,0,752,144,1,0,0,0,753,
  	754,5,126,0,0,754,146,1,0,0,0,755,756,5,124,0,0,756,148,1,0,0,0,757,758,
  	5,94,0,0,758,150,1,0,0,0,759,760,5,65,0,0,760,761,5,78,0,0,761,766,5,
  	68,0,0,762,763,5,97,0,0,763,764,5,110,0,0,764,766,5,100,0,0,765,759,1,
  	0,0,0,765,762,1,0,0,0,766,152,1,0,0,0,767,768,5,79,0,0,768,772,5,82,0,
  	0,769,770,5,111,0,0,770,772,5,114,0,0,771,767,1,0,0,0,771,769,1,0,0,0,
  	772,154,1,0,0,0,773,775,7,4,0,0,774,773,1,0,0,0,775,776,1,0,0,0,776,774,
  	1,0,0,0,776,777,1,0,0,0,777,778,1,0,0,0,778,779,6,77,0,0,779,156,1,0,
  	0,0,780,781,5,47,0,0,781,782,5,42,0,0,782,787,1,0,0,0,783,786,3,157,78,
  	0,784,786,9,0,0,0,785,783,1,0,0,0,785,784,1,0,0,0,786,789,1,0,0,0,787,
  	788,1,0,0,0,787,785,1,0,0,0,788,790,1,0,0,0,789,787,1,0,0,0,790,791,5,
  	42,0,0,791,792,5,47,0,0,792,793,1,0,0,0,793,794,6,78,1,0,794,158,1,0,
  	0,0,795,796,5,35,0,0,796,797,5,32,0,0,797,801,1,0,0,0,798,800,8,5,0,0,
  	799,798,1,0,0,0,800,803,1,0,0,0,801,799,1,0,0,0,801,802,1,0,0,0,802,804,
  	1,0,0,0,803,801,1,0,0,0,804,805,6,79,1,0,805,160,1,0,0,0,806,807,5,47,
  	0,0,807,808,5,47,0,0,808,812,1,0,0,0,809,811,8,5,0,0,810,809,1,0,0,0,
  	811,814,1,0,0,0,812,810,1,0,0,0,812,813,1,0,0,0,813,815,1,0,0,0,814,812,
  	1,0,0,0,815,816,6,80,1,0,816,162,1,0,0,0,817,818,7,6,0,0,818,164,1,0,
  	0,0,819,821,3,169,84,0,820,819,1,0,0,0,821,822,1,0,0,0,822,820,1,0,0,
  	0,822,823,1,0,0,0,823,824,1,0,0,0,824,826,5,46,0,0,825,827,3,169,84,0,
  	826,825,1,0,0,0,827,828,1,0,0,0,828,826,1,0,0,0,828,829,1,0,0,0,829,844,
  	1,0,0,0,830,832,3,169,84,0,831,830,1,0,0,0,832,833,1,0,0,0,833,831,1,
  	0,0,0,833,834,1,0,0,0,834,835,1,0,0,0,835,836,5,46,0,0,836,844,1,0,0,
  	0,837,839,5,46,0,0,838,840,3,169,84,0,839,838,1,0,0,0,840,841,1,0,0,0,
  	841,839,1,0,0,0,841,842,1,0,0,0,842,844,1,0,0,0,843,820,1,0,0,0,843,831,
  	1,0,0,0,843,837,1,0,0,0,844,166,1,0,0,0,845,846,7,7,0,0,846,168,1,0,0,
  	0,847,848,7,8,0,0,848,170,1,0,0,0,46,0,301,315,325,341,353,367,381,395,
  	405,421,441,451,467,485,495,501,511,521,535,541,547,555,563,571,581,666,
  	674,681,683,693,697,701,706,765,771,776,785,787,801,812,822,828,833,841,
  	843,2,6,0,0,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  rqllexerLexerStaticData = staticData.release();
}

}

RQLLexer::RQLLexer(CharStream *input) : Lexer(input) {
  RQLLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *rqllexerLexerStaticData->atn, rqllexerLexerStaticData->decisionToDFA, rqllexerLexerStaticData->sharedContextCache);
}

RQLLexer::~RQLLexer() {
  delete _interpreter;
}

std::string RQLLexer::getGrammarFileName() const {
  return "RQL.g4";
}

const std::vector<std::string>& RQLLexer::getRuleNames() const {
  return rqllexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& RQLLexer::getChannelNames() const {
  return rqllexerLexerStaticData->channelNames;
}

const std::vector<std::string>& RQLLexer::getModeNames() const {
  return rqllexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& RQLLexer::getVocabulary() const {
  return rqllexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView RQLLexer::getSerializedATN() const {
  return rqllexerLexerStaticData->serializedATN;
}

const atn::ATN& RQLLexer::getATN() const {
  return *rqllexerLexerStaticData->atn;
}




void RQLLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  rqllexerLexerInitialize();
#else
  ::antlr4::internal::call_once(rqllexerLexerOnceFlag, rqllexerLexerInitialize);
#endif
}
